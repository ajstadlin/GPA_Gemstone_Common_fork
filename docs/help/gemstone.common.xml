<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Gemstone.Common</name>
  </assembly>
  <members>
    <member name="T:Gemstone.BigEndian">
      <summary>
            Defines a set of big-endian byte order interoperability functions.
            </summary>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Boolean,System.Byte*)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Char,System.Byte*)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Decimal,System.Byte*)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Double,System.Byte*)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int16,System.Byte*)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int32,System.Byte*)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int64,System.Byte*)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Single,System.Byte*)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt16,System.Byte*)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt32,System.Byte*)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt64,System.Byte*)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes``1(``0,System.Byte*)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Decimal)">
      <summary>
            Returns the specified 128-bit decimal value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.BigEndian.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToBoolean(System.Byte*)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToChar(System.Byte*)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDecimal(System.Byte*)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDouble(System.Byte*)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt16(System.Byte*)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt32(System.Byte*)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt64(System.Byte*)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToSingle(System.Byte*)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt16(System.Byte*)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt32(System.Byte*)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt64(System.Byte*)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.BigEndian.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.BitMath">
      <summary>
            Contains some random and useful functions.
            </summary>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsCleared(System.UInt32)">
      <summary>
            Counts the number of bits that are not set
            </summary>
      <param name="value">Value with bits to count.</param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsCleared(System.UInt64)">
      <summary>
            Counts the number of bits that are not set
            </summary>
      <param name="value"></param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsSet(System.UInt32)">
      <summary>
            Counts the number of bits that are set
            </summary>
      <param name="value">Value with bits to count.</param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountBitsSet(System.UInt64)">
      <summary>
            Counts the number of bits that are set
            </summary>
      <param name="value">Value with bits to count.</param>
      <returns>Count of the number of bits set in <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingOnes(System.UInt32)">
      <summary>
            Counts the number of consecutive 1's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the highest bit working down.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingOnes(System.UInt64)">
      <summary>
            Counts the number of consecutive 1's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the highest bit working down.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingZeros(System.UInt32)">
      <summary>
            Counts the number of consecutive 0's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the highest bit working down.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountLeadingZeros(System.UInt64)">
      <summary>
            Counts the number of consecutive 0's starting from the highest bit working down.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the highest bit working down.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingOnes(System.UInt32)">
      <summary>
            Counts the number of consecutive 1's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the lowest bit working up.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingOnes(System.UInt64)">
      <summary>
            Counts the number of consecutive 1's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 1's starting from the lowest bit working up.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingZeros(System.UInt32)">
      <summary>
            Counts the number of consecutive 0's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the lowest bit working up.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CountTrailingZeros(System.UInt64)">
      <summary>
            Counts the number of consecutive 0's starting from the lowest bit working up.
            </summary>
      <param name="value">Target value for bit counting.</param>
      <returns>Number of consecutive 0's starting from the lowest bit working up.</returns>
    </member>
    <member name="M:Gemstone.BitMath.CreateBitMask(System.Int32)">
      <summary>
            Creates a bit mask for a number with the given number of bits.
            </summary>
      <param name="bitCount">Bit count.</param>
      <returns>Bit mask for a number with the given number of bits.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetClearedBitPositions(System.UInt32)">
      <summary>
            Returns the bit position for every bit that is cleared in the provided value.
            Bit positions are defined as 0-31;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all cleared bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetClearedBitPositions(System.UInt64)">
      <summary>
            Returns the bit position for every bit that is cleared in the provided value.
            Bit positions are defined as 0-63;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all cleared bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetSetBitPositions(System.UInt32)">
      <summary>
            Returns the bit position for every bit that is set in the provided value.
            Bit positions are defined as 0-31;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all set bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.GetSetBitPositions(System.UInt64)">
      <summary>
            Returns the bit position for every bit that is set in the provided value.
            Bit positions are defined as 0-63;
            </summary>
      <param name="value">Target value for bit check enumeration.</param>
      <returns>Enumeration of all set bit positions.</returns>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.Int32)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <see pref="value" /> is less than zero</exception>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.Int64)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If <see pref="value" /> is less than zero</exception>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.UInt32)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.BitMath.IsPowerOfTwo(System.UInt64)">
      <summary>
            Determines if the number is a power of 2.
            </summary>
      <param name="value">The value to check power of two properties.</param>
      <returns>
        <c>true</c> if <paramref name="value" /> is a power of 2; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundDownToNearestPowerOfTwo(System.UInt32)">
      <summary>
            Rounds a number down to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If value is zero, 1 is returned.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundDownToNearestPowerOfTwo(System.UInt64)">
      <summary>
            Rounds a number down to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If value is zero, one is returned.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundUpToNearestPowerOfTwo(System.UInt32)">
      <summary>
            Rounds a number up to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If the value is larger than the largest power of 2. It is rounded down.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
    </member>
    <member name="M:Gemstone.BitMath.RoundUpToNearestPowerOfTwo(System.UInt64)">
      <summary>
            Rounds a number up to the nearest power of 2.
            If the value is a power of two, the same value is returned.
            If the value is larger than the largest power of 2. It is rounded down.
            </summary>
      <param name="value">Value to round.</param>
      <returns>
        <paramref name="value" /> rounded to the nearest power of 2.</returns>
    </member>
    <member name="T:Gemstone.Bits">
      <summary>
            Represents bits in a signed or unsigned integer value.
            </summary>
    </member>
    <member name="F:Gemstone.Bits.Nil">
      <summary>No bits set (0x0000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit00">
      <summary>Bit 00 (0x0000000000000001)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit01">
      <summary>Bit 01 (0x0000000000000002)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit02">
      <summary>Bit 02 (0x0000000000000004)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit03">
      <summary>Bit 03 (0x0000000000000008)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit04">
      <summary>Bit 04 (0x0000000000000010)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit05">
      <summary>Bit 05 (0x0000000000000020)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit06">
      <summary>Bit 06 (0x0000000000000040)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit07">
      <summary>Bit 07 (0x0000000000000080)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit08">
      <summary>Bit 08 (0x0000000000000100)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit09">
      <summary>Bit 09 (0x0000000000000200)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit10">
      <summary>Bit 10 (0x0000000000000400)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit11">
      <summary>Bit 11 (0x0000000000000800)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit12">
      <summary>Bit 12 (0x0000000000001000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit13">
      <summary>Bit 13 (0x0000000000002000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit14">
      <summary>Bit 14 (0x0000000000004000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit15">
      <summary>Bit 15 (0x0000000000008000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit16">
      <summary>Bit 16 (0x0000000000010000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit17">
      <summary>Bit 17 (0x0000000000020000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit18">
      <summary>Bit 18 (0x0000000000040000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit19">
      <summary>Bit 19 (0x0000000000080000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit20">
      <summary>Bit 20 (0x0000000000100000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit21">
      <summary>Bit 21 (0x0000000000200000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit22">
      <summary>Bit 22 (0x0000000000400000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit23">
      <summary>Bit 23 (0x0000000000800000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit24">
      <summary>Bit 24 (0x0000000001000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit25">
      <summary>Bit 25 (0x0000000002000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit26">
      <summary>Bit 26 (0x0000000004000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit27">
      <summary>Bit 27 (0x0000000008000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit28">
      <summary>Bit 28 (0x0000000010000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit29">
      <summary>Bit 29 (0x0000000020000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit30">
      <summary>Bit 30 (0x0000000040000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit31">
      <summary>Bit 31 (0x0000000080000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit32">
      <summary>Bit 32 (0x0000000100000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit33">
      <summary>Bit 33 (0x0000000200000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit34">
      <summary>Bit 34 (0x0000000400000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit35">
      <summary>Bit 35 (0x0000000800000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit36">
      <summary>Bit 36 (0x0000001000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit37">
      <summary>Bit 37 (0x0000002000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit38">
      <summary>Bit 38 (0x0000004000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit39">
      <summary>Bit 39 (0x0000008000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit40">
      <summary>Bit 40 (0x0000010000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit41">
      <summary>Bit 41 (0x0000020000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit42">
      <summary>Bit 42 (0x0000040000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit43">
      <summary>Bit 43 (0x0000080000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit44">
      <summary>Bit 44 (0x0000100000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit45">
      <summary>Bit 45 (0x0000200000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit46">
      <summary>Bit 46 (0x0000400000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit47">
      <summary>Bit 47 (0x0000800000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit48">
      <summary>Bit 48 (0x0001000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit49">
      <summary>Bit 49 (0x0002000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit50">
      <summary>Bit 50 (0x0004000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit51">
      <summary>Bit 51 (0x0008000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit52">
      <summary>Bit 52 (0x0010000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit53">
      <summary>Bit 53 (0x0020000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit54">
      <summary>Bit 54 (0x0040000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit55">
      <summary>Bit 55 (0x0080000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit56">
      <summary>Bit 56 (0x0100000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit57">
      <summary>Bit 57 (0x0200000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit58">
      <summary>Bit 58 (0x0400000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit59">
      <summary>Bit 59 (0x0800000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit60">
      <summary>Bit 60 (0x1000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit61">
      <summary>Bit 61 (0x2000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit62">
      <summary>Bit 62 (0x4000000000000000)</summary>
    </member>
    <member name="F:Gemstone.Bits.Bit63">
      <summary>Bit 63 (0x8000000000000000)</summary>
    </member>
    <member name="T:Gemstone.Common">
      <summary>
            Defines common global functions.
            </summary>
    </member>
    <member name="M:Gemstone.Common.CreateArray``1(System.Int32)">
      <summary>Creates a strongly-typed Array.</summary>
      <param name="length">Desired length of new array.</param>
      <typeparam name="T">Return type for new array.</typeparam>
      <returns>New array of specified type.</returns>
    </member>
    <member name="M:Gemstone.Common.CreateArray``1(System.Int32,``0)">
      <summary>Creates a strongly-typed Array with an initial value parameter.</summary>
      <param name="length">Desired length of new array.</param>
      <param name="initialValue">Value used to initialize all array elements.</param>
      <typeparam name="T">Return type for new array.</typeparam>
      <returns>New array of specified type.</returns>
    </member>
    <member name="M:Gemstone.Common.GetOSPlatformID">
      <summary>
            Gets the operating system <see cref="T:System.PlatformID" /></summary>
      <returns>The operating system <see cref="T:System.PlatformID" />.</returns>
    </member>
    <member name="M:Gemstone.Common.GetOSProductName">
      <summary>
            Gets the operating system product name.
            </summary>
      <returns>Operating system product name.</returns>
    </member>
    <member name="M:Gemstone.Common.IIf``1(System.Boolean,``0,``0)">
      <summary>Returns one of two strongly-typed objects.</summary>
      <param name="expression">The expression you want to evaluate.</param>
      <param name="truePart">Returned if expression evaluates to True.</param>
      <param name="falsePart">Returned if expression evaluates to False.</param>
      <typeparam name="T">Return type used for immediate expression</typeparam>
      <returns>One of two objects, depending on the evaluation of given expression.</returns>
    </member>
    <member name="M:Gemstone.Common.IsDefaultValue(System.Object)">
      <summary>Determines if given item is equal to its default value (e.g., null or 0.0).</summary>
      <param name="item">Object to evaluate.</param>
      <returns>Result of evaluation as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="F:Gemstone.Common.IsMono">
      <summary>
            Determines if the code base is currently running under Mono.
            </summary>
    </member>
    <member name="M:Gemstone.Common.IsNonStringReference(System.Object)">
      <summary>Determines if given item is a reference type but not a string.</summary>
      <param name="item">Object to evaluate.</param>
      <returns>Result of evaluation as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumeric(System.Object)">
      <summary>
            Determines if given <paramref name="item" /> is or can be interpreted as numeric.
            </summary>
      <param name="item">Object to evaluate.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is or can be interpreted as numeric; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType``1">
      <summary>
            Determines if <typeparamref name="T" /> is a numeric type, i.e., has a <see cref="T:System.TypeCode" /> that is one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <typeparam name="T">
        <see cref="T:System.Type" /> to check.</typeparam>
      <returns>
        <c>true</c> if <typeparamref name="T" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType(System.Object)">
      <summary>
            Determines if <see cref="T:System.Type" /> of <paramref name="item" /> is a numeric type, i.e., <paramref name="item" />
            is <see cref="T:System.IConvertible" /> and has a <see cref="T:System.TypeCode" /> that is one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <param name="item">Object to evaluate.</param>
      <returns>
        <c>true</c> if <paramref name="item" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType(System.Type)">
      <summary>
            Determines if <paramref name="type" /> is a numeric type, i.e., has a <see cref="T:System.TypeCode" /> that is one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <param name="type">
        <see cref="T:System.Type" /> to check.</param>
      <returns>
        <c>true</c> if <paramref name="type" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Common.IsNumericType(System.TypeCode)">
      <summary>
            Determines if <paramref name="typeCode" /> is a numeric type, i.e., one of:
            <see cref="F:System.TypeCode.Boolean" />, <see cref="F:System.TypeCode.SByte" />, <see cref="F:System.TypeCode.Byte" />,
            <see cref="F:System.TypeCode.Int16" />, <see cref="F:System.TypeCode.UInt16" />, <see cref="F:System.TypeCode.Int32" />,
            <see cref="F:System.TypeCode.UInt32" />, <see cref="F:System.TypeCode.Int64" />, <see cref="F:System.TypeCode.UInt64" /><see cref="F:System.TypeCode.Single" />, <see cref="F:System.TypeCode.Double" /> or <see cref="F:System.TypeCode.Decimal" />.
            </summary>
      <param name="typeCode">
        <see cref="T:System.TypeCode" /> value to check.</param>
      <returns>
        <c>true</c> if <paramref name="typeCode" /> is a numeric type; otherwise, <c>false</c>.</returns>
    </member>
    <member name="F:Gemstone.Common.IsPosixEnvironment">
      <summary>
            Determines if the current system is a POSIX style environment.
            </summary>
    </member>
    <member name="M:Gemstone.Common.IsReference(System.Object)">
      <summary>Determines if given item is a reference type.</summary>
      <param name="item">Object to evaluate.</param>
      <returns>Result of evaluation as a <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Gemstone.Common.Max``1(``0[])">
      <summary>Returns the largest item from a list of parameters.</summary>
      <param name="itemList">A variable number of parameters of the specified type .</param>
      <typeparam name="T">Return type <see cref="T:System.Type" /> that is the maximum value in the <paramref name="itemList" />.</typeparam>
      <returns>Result is the maximum value of type <see cref="T:System.Type" /> in the <paramref name="itemList" />.</returns>
    </member>
    <member name="M:Gemstone.Common.Mid``1(``0,``0,``0)">
      <summary>Returns the value that is neither the largest nor the smallest.</summary>
      <param name="value1">Value 1.</param>
      <param name="value2">Value 2.</param>
      <param name="value3">Value 3.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of the objects passed to and returned from this method.</typeparam>
      <returns>Result is the value that is neither the largest nor the smallest.</returns>
    </member>
    <member name="M:Gemstone.Common.Min``1(``0[])">
      <summary>Returns the smallest item from a list of parameters.</summary>
      <param name="itemList">A variable number of parameters of the specified type.</param>
      <typeparam name="T">Return type <see cref="T:System.Type" /> that is the minimum value in the <paramref name="itemList" />.</typeparam>
      <returns>Result is the minimum value of type <see cref="T:System.Type" /> in the <paramref name="itemList" />.</returns>
    </member>
    <member name="M:Gemstone.Common.TypeConvertFromString(System.String,System.Type)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of
            specified type if conversion fails.
            </returns>
    </member>
    <member name="M:Gemstone.Common.TypeConvertFromString(System.String,System.Type,System.Globalization.CultureInfo)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of
            specified type if conversion fails.
            </returns>
    </member>
    <member name="M:Gemstone.Common.TypeConvertToString(System.Object)">
      <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.String" /> using an appropriate <see cref="T:System.ComponentModel.TypeConverter" />.
            </summary>
      <param name="value">Value to convert to a <see cref="T:System.String" />.</param>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Gemstone.Common.TypeConvertToString(System.Object,System.Globalization.CultureInfo)">
      <summary>
            Converts <paramref name="value" /> to a <see cref="T:System.String" /> using an appropriate <see cref="T:System.ComponentModel.TypeConverter" />.
            </summary>
      <param name="value">Value to convert to a <see cref="T:System.String" />.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <returns>
        <paramref name="value" /> converted to a <see cref="T:System.String" />.</returns>
    </member>
    <member name="T:Gemstone.EnabledState">
      <summary>
            Enumeration that represents a state of either "automatic", "on" or "off".
            </summary>
    </member>
    <member name="F:Gemstone.EnabledState.Auto">
      <summary>
            Represents the automatic, i.e., default, state.
            </summary>
    </member>
    <member name="F:Gemstone.EnabledState.On">
      <summary>
            Represents the on, i.e., enabled, state.
            </summary>
    </member>
    <member name="F:Gemstone.EnabledState.Off">
      <summary>
            Represents the off, i.e., disabled, state.
            </summary>
    </member>
    <member name="T:Gemstone.Encoding7Bit">
      <summary>
            Defines 7-bit encoding functions.
            </summary>
    </member>
    <member name="M:Gemstone.Encoding7Bit.GetSize(System.UInt32)">
      <summary>
            Gets the number of bytes required to write the provided value.
            </summary>
      <param name="value">Value to measure.</param>
      <returns>Number of bytes required to write the provided value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.GetSize(System.UInt64)">
      <summary>
            Gets the number of bytes required to write the provided value.
            </summary>
      <param name="value">Value to measure.</param>
      <returns>The number of bytes needed to store the provided value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.GetSizeInt15(System.Int16)">
      <summary>
            Gets the number of bytes required to write the provided value.
            </summary>
      <param name="value">Value to measure</param>
      <returns>Number of bytes required to write the provided value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Measure15(System.Byte*,System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source byte stream.</param>
      <param name="position">Start position in stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Measure15(System.Byte[],System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source byte stream.</param>
      <param name="position">Start position in stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureInt15(System.Byte*)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source byte stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt32(System.Byte*)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt32(System.Byte*,System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt32(System.Byte[],System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt64(System.Byte*)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt64(System.Byte*,System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.MeasureUInt64(System.Byte[],System.Int32)">
      <summary>
            Gets the number of bytes for the supplied value in the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>Number of bytes for the supplied value in the stream.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.Byte*,System.Int32@)">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded short.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.Byte[],System.Int32@)">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded short.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.Func{System.Byte})">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Function used to read next byte.</param>
      <returns>7-bit encoded short.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadInt15(System.IO.Stream)">
      <summary>
            Reads a 7-bit encoded short.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>t7-bit encoded short.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Occurs if the end of the stream was reached.</exception>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.Byte*,System.Int32@)">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded uint.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.Byte[],System.Int32@)">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded uint.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.Func{System.Byte})">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Function used to read next byte.</param>
      <returns>7-bit encoded uint.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt32(System.IO.Stream)">
      <summary>
            Reads a 7-bit encoded uint.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>7-bit encoded uint.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Occurs if the end of the stream was reached.</exception>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.Byte*,System.Int32@)">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded ulong.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.Byte[],System.Int32@)">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.  Position will be updated after reading.</param>
      <returns>7-bit encoded ulong.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.Func{System.Byte})">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Function used to read next byte.</param>
      <returns>7-bit encoded ulong.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.ReadUInt64(System.IO.Stream)">
      <summary>
            Reads a 7-bit encoded ulong.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>7-bit encoded ulong.</returns>
      <exception cref="T:System.IO.EndOfStreamException">Occurs if the end of the stream was reached.</exception>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Action{System.Byte},System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Method to write a byte.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Action{System.Byte},System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Method to write a byte.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.Int32@,System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.Int32@,System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
      <returns>Number of bytes required to store the value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte*,System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
      <returns>Number of bytes required to store the value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte[],System.Int32@,System.UInt32)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.Write(System.Byte[],System.Int32@,System.UInt64)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Action{System.Byte},System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Method to write a byte.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Byte*,System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write. Cannot be negative.</param>
      <returns>Number of bytes required to store the value.</returns>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Byte*,System.Int32@,System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.Encoding7Bit.WriteInt15(System.Byte[],System.Int32@,System.Int16)">
      <summary>
            Writes the 7-bit encoded value to the provided stream.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="position">Reference position in stream.
            This field will be updated when the function returns.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="T:Gemstone.EventArgs`1">
      <summary>
            Represents a generic event arguments class with one data argument.
            </summary>
      <typeparam name="T">Type of data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`1.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`1" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`1.#ctor(`0)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`1" /> class.
            </summary>
      <param name="argument">The argument data for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`1.Argument">
      <summary>
            Gets or sets the data argument for the event using <see cref="T:Gemstone.EventArgs`1" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.EventArgs`2">
      <summary>
            Represents a generic event arguments class with two data arguments.
            </summary>
      <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
      <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`2.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`2" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`2.#ctor(`0,`1)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`2" /> class.
            </summary>
      <param name="argument1">The first data argument for the event.</param>
      <param name="argument2">The second data argument for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`2.Argument1">
      <summary>
            Gets or sets the first data argument for the event using <see cref="T:Gemstone.EventArgs`2" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`2.Argument2">
      <summary>
            Gets or sets the second data argument for the event using <see cref="T:Gemstone.EventArgs`2" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.EventArgs`3">
      <summary>
            Represents a generic event arguments class with three data arguments.
            </summary>
      <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
      <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
      <typeparam name="T3">The type of the third data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`3.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`3" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`3.#ctor(`0,`1,`2)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`3" /> class.
            </summary>
      <param name="argument1">The first data argument for the event.</param>
      <param name="argument2">The second data argument for the event.</param>
      <param name="argument3">The third data argument for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`3.Argument1">
      <summary>
            Gets or sets the first data argument for the event using <see cref="T:Gemstone.EventArgs`3" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`3.Argument2">
      <summary>
            Gets or sets the second data argument for the event using <see cref="T:Gemstone.EventArgs`3" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`3.Argument3">
      <summary>
            Gets or sets the third data argument for the event using <see cref="T:Gemstone.EventArgs`3" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.EventArgs`4">
      <summary>
            Represents a generic event arguments class with three data arguments.
            </summary>
      <typeparam name="T1">The type of the first data argument for this event arguments instance.</typeparam>
      <typeparam name="T2">The type of the second data argument for this event arguments instance.</typeparam>
      <typeparam name="T3">The type of the third data argument for this event arguments instance.</typeparam>
      <typeparam name="T4">The type of the fourth data argument for this event arguments instance.</typeparam>
    </member>
    <member name="M:Gemstone.EventArgs`4.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`4" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.EventArgs`4.#ctor(`0,`1,`2,`3)">
      <summary>
            Initializes a new instance of the <see cref="T:Gemstone.EventArgs`3" /> class.
            </summary>
      <param name="argument1">The first data argument for the event.</param>
      <param name="argument2">The second data argument for the event.</param>
      <param name="argument3">The third data argument for the event.</param>
      <param name="argument4">The fourth data argument for the event.</param>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument1">
      <summary>
            Gets or sets the first data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument2">
      <summary>
            Gets or sets the second data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument3">
      <summary>
            Gets or sets the third data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="F:Gemstone.EventArgs`4.Argument4">
      <summary>
            Gets or sets the fourth data argument for the event using <see cref="T:Gemstone.EventArgs`4" /> for its <see cref="T:System.EventArgs" />.
            </summary>
    </member>
    <member name="T:Gemstone.LibraryEvents">
      <summary>
            Defines library-level static events.
            </summary>
    </member>
    <member name="E:Gemstone.LibraryEvents.SuppressedException">
      <summary>
            Exposes exceptions that were suppressed but otherwise unhandled.  
            </summary>
    </member>
    <member name="T:Gemstone.LittleEndian">
      <summary>
            Defines a set of little-endian byte order interoperability functions.
            </summary>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Boolean,System.Byte*)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Boolean,System.Byte[],System.Int32)">
      <summary>
            Copies the specified <see cref="T:System.Boolean" /> value as an array of 1 byte in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Char,System.Byte*)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Char,System.Byte[],System.Int32)">
      <summary>
            Copies the specified Unicode character value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The Unicode character value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Decimal,System.Byte*)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Decimal,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 128-bit decimal value as an array of 16 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Double,System.Byte*)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Double,System.Byte[],System.Int32)">
      <summary>
            Copies the specified double-precision floating point value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int16,System.Byte*)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit signed integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int32,System.Byte*)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit signed integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int64,System.Byte*)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Int64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit signed integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Single,System.Byte*)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.Single,System.Byte[],System.Int32)">
      <summary>
            Copies the specified single-precision floating point value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt16,System.Byte*)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt16,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 16-bit unsigned integer value as an array of 2 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt32,System.Byte*)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt32,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 32-bit unsigned integer value as an array of 4 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt64,System.Byte*)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes(System.UInt64,System.Byte[],System.Int32)">
      <summary>
            Copies the specified 64-bit unsigned integer value as an array of 8 bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The number to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <returns>Length of bytes copied into array based on size of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes``1(``0,System.Byte*)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destination">The destination buffer.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.CopyBytes``1(``0,System.Byte[],System.Int32)">
      <summary>
            Copies the specified primitive type value as an array of bytes in the target endian-order to the destination array.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert and copy.</param>
      <param name="destinationArray">The destination buffer.</param>
      <param name="destinationIndex">The byte offset into <paramref name="destinationArray" />.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>Length of bytes copied into array based on size of <typeparamref name="T" />.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Boolean)">
      <summary>
            Returns the specified <see cref="T:System.Boolean" /> value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to convert.</param>
      <returns>An array of bytes with length 1.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Char)">
      <summary>
            Returns the specified Unicode character value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The Unicode character value to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Decimal)">
      <summary>
            Returns the specified 128-bit decimal value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 16.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Double)">
      <summary>
            Returns the specified double-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Int16)">
      <summary>
            Returns the specified 16-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Int32)">
      <summary>
            Returns the specified 32-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Int64)">
      <summary>
            Returns the specified 64-bit signed integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.Single)">
      <summary>
            Returns the specified single-precision floating point value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.UInt16)">
      <summary>
            Returns the specified 16-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 2.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.UInt32)">
      <summary>
            Returns the specified 32-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 4.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes(System.UInt64)">
      <summary>
            Returns the specified 64-bit unsigned integer value as an array of bytes.
            </summary>
      <param name="value">The number to convert.</param>
      <returns>An array of bytes with length 8.</returns>
    </member>
    <member name="M:Gemstone.LittleEndian.GetBytes``1(``0)">
      <summary>
            Returns the specified value as an array of bytes in the target endian-order.
            </summary>
      <param name="value">The value to convert.</param>
      <typeparam name="T">Native value type to get bytes for.</typeparam>
      <returns>An array of bytes with length 1.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> type is not primitive.</exception>
      <exception cref="T:System.InvalidOperationException">Cannot get bytes for <paramref name="value" /> type.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToBoolean(System.Byte*)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToBoolean(System.Byte[],System.Int32)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value converted from one byte at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes.</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>true if the byte at startIndex in value is nonzero; otherwise, false.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToChar(System.Byte*)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToChar(System.Byte[],System.Int32)">
      <summary>
            Returns a Unicode character converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A character formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDecimal(System.Byte*)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDecimal(System.Byte[],System.Int32)">
      <summary>
            Returns a 128-bit decimal converted from 16 bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 128-bit decimal formed by 16 bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDouble(System.Byte*)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToDouble(System.Byte[],System.Int32)">
      <summary>
            Returns a double-precision floating point number converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A double-precision floating point number formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt16(System.Byte*)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit signed integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit signed integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt32(System.Byte*)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit signed integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit signed integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt64(System.Byte*)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit signed integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit signed integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToSingle(System.Byte*)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToSingle(System.Byte[],System.Int32)">
      <summary>
            Returns a single-precision floating point number converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A single-precision floating point number formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt16(System.Byte*)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt16(System.Byte[],System.Int32)">
      <summary>
            Returns a 16-bit unsigned integer converted from two bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 16-bit unsigned integer formed by two bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt32(System.Byte*)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt32(System.Byte[],System.Int32)">
      <summary>
            Returns a 32-bit unsigned integer converted from four bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="buffer">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 32-bit unsigned integer formed by four bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt64(System.Byte*)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="M:Gemstone.LittleEndian.ToUInt64(System.Byte[],System.Int32)">
      <summary>
            Returns a 64-bit unsigned integer converted from eight bytes, accounting for target endian-order, at a specified position in a byte array.
            </summary>
      <param name="value">An array of bytes (i.e., buffer containing binary image of value).</param>
      <param name="startIndex">The starting position within value.</param>
      <returns>A 64-bit unsigned integer formed by eight bytes beginning at startIndex.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
    </member>
    <member name="T:Gemstone.NullableWeakReference">
      <summary>
            A <see cref="T:System.WeakReference" /> implementation that can have the <see cref="P:Gemstone.NullableWeakReference.Target" /> object set to null.
            Natively, setting <see cref="P:System.WeakReference.Target" /> to null will throw an <see cref="T:System.InvalidOperationException" />,
            </summary>
    </member>
    <member name="M:Gemstone.NullableWeakReference.#ctor(System.Object)">
      <summary>
            Creates a <see cref="T:Gemstone.NullableWeakReference" /></summary>
      <param name="target">the object to maintain the weak reference to. Cannot be null.</param>
    </member>
    <member name="M:Gemstone.NullableWeakReference.Clear">
      <summary>
            Sets <see cref="P:Gemstone.NullableWeakReference.Target" /> to null so subsequent calls to <see cref="P:Gemstone.NullableWeakReference.Target" /> returns null.
            </summary>
    </member>
    <member name="P:Gemstone.NullableWeakReference.IsAlive">
      <summary>
            Gets an indication whether the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object has been cleared or garbage collected.
            </summary>
      <returns>
            true if the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object has not been garbage collected or cleared 
            and is still accessible; otherwise, false.
            </returns>
    </member>
    <member name="P:Gemstone.NullableWeakReference.Target">
      <summary>
            Gets the object (the target) referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object.
            Set will only accept null.
            </summary>
      <returns>
            null if the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object has been garbage collected or cleared;
            otherwise, a reference to the object referenced by the current <see cref="T:Gemstone.NullableWeakReference" /> object.
            </returns>
      <exception cref="T:System.InvalidOperationException">If setting this property to anything other than null</exception>
    </member>
    <member name="T:Gemstone.USTimeZones">
      <summary>
            Defines a few common United States time zones.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Alaskan">
      <summary>
            Gets the Alaskan time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Atlantic">
      <summary>
            Gets the Atlantic time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Central">
      <summary>
            Gets the Central time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Eastern">
      <summary>
            Gets the Eastern time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Hawaiian">
      <summary>
            Gets the Hawaiian time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Mountain">
      <summary>
            Gets the Mountain time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Pacific">
      <summary>
            Gets the Pacific time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.Samoa">
      <summary>
            Gets the Samoa time zone.
            </summary>
    </member>
    <member name="P:Gemstone.USTimeZones.WestPacific">
      <summary>
            Gets the West Pacific time zone.
            </summary>
    </member>
    <member name="T:Gemstone.Word">
      <summary>
            Defines functions related to 16-bit words, 32-bit double-words and 64-bit quad-words.
            </summary>
    </member>
    <member name="M:Gemstone.Word.MakeDoubleWord(System.UInt16,System.UInt16)">
      <summary>
            Makes an unsigned double-word (UInt32) from two unsigned words (UInt16).
            </summary>
      <param name="high">High word.</param>
      <param name="low">Low word.</param>
      <returns>An unsigned 32-bit double-word made from the two specified unsigned 16-bit words.</returns>
    </member>
    <member name="M:Gemstone.Word.MakeQuadWord(System.UInt32,System.UInt32)">
      <summary>
            Makes an unsigned quad-word (UInt64) from two unsigned double-words (UInt32).
            </summary>
      <param name="high">High double-word.</param>
      <param name="low">Low double-word.</param>
      <returns>An unsigned 64-bit quad-word made from the two specified unsigned 32-bit double-words.</returns>
    </member>
    <member name="M:Gemstone.Word.MakeWord(System.Byte,System.Byte)">
      <summary>
            Makes an unsigned word (UInt16) from two bytes.
            </summary>
      <param name="high">High byte.</param>
      <param name="low">Low byte.</param>
      <returns>An unsigned 16-bit word made from the two specified bytes.</returns>
    </member>
    <member name="T:Gemstone.ActionExtensions.ActionExtensions">
      <summary>
            Defines extension methods for actions.
            </summary>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action,System.Int32,System.Action{System.Exception})">
      <summary>
            Execute an action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <returns>
            A function to call which will cancel the operation.
            Cancel function returns true if <paramref name="action" /> is cancelled in time, false if not.
            </returns>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action,System.Int32,System.Threading.CancellationToken,System.Action{System.Exception})">
      <summary>
            Execute an action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="cancellationToken">The token used to cancel execution.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action{System.Threading.CancellationToken},System.Int32,System.Action{System.Exception})">
      <summary>
            Execute a cancellable action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
      <returns>
            A function to call which will cancel the operation.
            Cancel function returns true if <paramref name="action" /> is cancelled, false if not.
            </returns>
    </member>
    <member name="M:Gemstone.ActionExtensions.ActionExtensions.DelayAndExecute(System.Action{System.Threading.CancellationToken},System.Int32,System.Threading.CancellationToken,System.Action{System.Exception})">
      <summary>
            Execute a cancellable action on the thread pool after a specified number of milliseconds.
            </summary>
      <param name="action">The action to be executed.</param>
      <param name="delay">The amount of time to wait before execution, in milliseconds.</param>
      <param name="cancellationToken">The token used to cancel execution.</param>
      <param name="exceptionAction">The action to be performed if an exception is thrown from the action.</param>
    </member>
    <member name="T:Gemstone.ArrayExtensions.ArrayExtensions">
      <summary>
            Defines extension functions related to <see cref="T:System.Array" /> manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Int32)">
      <summary>
            Returns a copy of the specified portion of the <paramref name="array" /> array.
            </summary>
      <param name="array">Source array.</param>
      <param name="startIndex">Offset into <paramref name="array" /> array.</param>
      <param name="length">Length of <paramref name="array" /> array to copy at <paramref name="startIndex" /> offset.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>A array of data copied from the specified portion of the source array.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source array -or-
            <paramref name="length" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Combines buffers together as a single image.
            </summary>
      <param name="source">Source buffer.</param>
      <param name="other1">First buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other2">Second buffer to combine to <paramref name="source" /> buffer.</param>
      <returns>Combined buffers.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Combines buffers together as a single image.
            </summary>
      <param name="source">Source buffer.</param>
      <param name="other1">First buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other2">Second buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other3">Third buffer to combine to <paramref name="source" /> buffer.</param>
      <returns>Combined buffers.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>
            Combines buffers together as a single image.
            </summary>
      <param name="source">Source buffer.</param>
      <param name="other1">First buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other2">Second buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other3">Third buffer to combine to <paramref name="source" /> buffer.</param>
      <param name="other4">Fourth buffer to combine to <paramref name="source" /> buffer.</param>
      <returns>Combined buffers.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine(System.Byte[][])">
      <summary>
            Combines an array of buffers together as a single image.
            </summary>
      <param name="buffers">Array of byte buffers.</param>
      <returns>Combined buffers.</returns>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],System.Int32,System.Int32,``0[],System.Int32,System.Int32)">
      <summary>
            Combines specified portions of arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="sourceOffset">Offset into <paramref name="source" /> array to begin copy.</param>
      <param name="sourceCount">Number of bytes to copy from <paramref name="source" /> array.</param>
      <param name="other">Other array to combine to <paramref name="source" /> array.</param>
      <param name="otherOffset">Offset into <paramref name="other" /> array to begin copy.</param>
      <param name="otherCount">Number of bytes to copy from <paramref name="other" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined specified portions of both arrays.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceOffset" /> or <paramref name="otherOffset" /> is outside the range of valid indexes for the associated array -or-
            <paramref name="sourceCount" /> or <paramref name="otherCount" /> is less than 0 -or- 
            <paramref name="sourceOffset" /> or <paramref name="otherOffset" />, 
            and <paramref name="sourceCount" /> or <paramref name="otherCount" /> do not specify a valid section in the associated array.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other">Other array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other1">First array to combine to <paramref name="source" /> array.</param>
      <param name="other2">Second array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[],``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other1">First array to combine to <paramref name="source" /> array.</param>
      <param name="other2">Second array to combine to <paramref name="source" /> array.</param>
      <param name="other3">Third array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[],``0[],``0[],``0[],``0[])">
      <summary>
            Combines arrays together into a single array.
            </summary>
      <param name="source">Source array.</param>
      <param name="other1">First array to combine to <paramref name="source" /> array.</param>
      <param name="other2">Second array to combine to <paramref name="source" /> array.</param>
      <param name="other3">Third array to combine to <paramref name="source" /> array.</param>
      <param name="other4">Fourth array to combine to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>Combined arrays.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.Combine``1(``0[][])">
      <summary>
            Combines array of arrays together into a single array.
            </summary>
      <param name="arrays">Array of arrays to combine.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of arrays.</typeparam>
      <returns>Combined arrays.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CompareTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
      <summary>
            Returns comparison results of two binary arrays.
            </summary>
      <param name="source">Source array.</param>
      <param name="sourceOffset">Offset into <paramref name="source" /> array to begin compare.</param>
      <param name="other">Other array to compare to <paramref name="source" /> array.</param>
      <param name="otherOffset">Offset into <paramref name="other" /> array to begin compare.</param>
      <param name="count">Number of bytes to compare in both arrays.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>
        <para>
            A signed integer that indicates the relative comparison of <paramref name="source" /> array and <paramref name="other" /> array.
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Return Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>Source array is less than other array.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>Source array is equal to other array.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>Source array is greater than other array.</description>
            </item>
          </list>
        </para>
      </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="sourceOffset" /> or <paramref name="otherOffset" /> is outside the range of valid indexes for the associated array -or-
            <paramref name="count" /> is less than 0 -or- 
            <paramref name="sourceOffset" /> or <paramref name="otherOffset" /> and <paramref name="count" /> do not specify a valid section in the associated array.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.CompareTo``1(``0[],``0[])">
      <summary>Returns comparison results of two binary arrays.</summary>
      <param name="source">Source array.</param>
      <param name="other">Other array to compare to <paramref name="source" /> array.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>
        <para>
            A signed integer that indicates the relative comparison of <paramref name="source" /> array and <paramref name="other" /> array.
            </para>
        <para>
          <list type="table">
            <listheader>
              <term>Return Value</term>
              <description>Description</description>
            </listheader>
            <item>
              <term>Less than zero</term>
              <description>Source array is less than other array.</description>
            </item>
            <item>
              <term>Zero</term>
              <description>Source array is equal to other array.</description>
            </item>
            <item>
              <term>Greater than zero</term>
              <description>Source array is greater than other array.</description>
            </item>
          </list>
        </para>
      </returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.IndexOfSequence``1(``0[],``0[])">
      <summary>
            Searches for the specified <paramref name="sequenceToFind" /> and returns the index of the first occurrence within the <paramref name="array" />.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToFind">Sequence of items to search for.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The zero-based index of the first occurrence of the <paramref name="sequenceToFind" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.IndexOfSequence``1(``0[],``0[],System.Int32)">
      <summary>
            Searches for the specified <paramref name="sequenceToFind" /> and returns the index of the first occurrence within the range of elements in the <paramref name="array" />
            that starts at the specified index.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToFind">Sequence of items to search for.</param>
      <param name="startIndex">Start index in the <paramref name="array" /> to start searching.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The zero-based index of the first occurrence of the <paramref name="sequenceToFind" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.IndexOfSequence``1(``0[],``0[],System.Int32,System.Int32)">
      <summary>
            Searches for the specified <paramref name="sequenceToFind" /> and returns the index of the first occurrence within the range of elements in the <paramref name="array" />
            that starts at the specified index and contains the specified number of elements.
            </summary>
      <param name="array">Array to search.</param>
      <param name="sequenceToFind">Sequence of items to search for.</param>
      <param name="startIndex">Start index in the <paramref name="array" /> to start searching.</param>
      <param name="length">Number of bytes in the <paramref name="array" /> to search through.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <returns>The zero-based index of the first occurrence of the <paramref name="sequenceToFind" /> in the <paramref name="array" />, if found; otherwise, -1.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="sequenceToFind" /> is null or has zero length.
            </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source array -or-
            <paramref name="length" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.ReadStructure``1(System.Byte[])">
      <summary>
            Reads a structure from a byte array.
            </summary>
      <param name="bytes">Bytes containing structure.</param>
      <typeparam name="T">Type of structure to read.</typeparam>
      <returns>A structure from <paramref name="bytes" />.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.ReadStructure``1(System.IO.BinaryReader)">
      <summary>
            Reads a structure from a <see cref="T:System.IO.BinaryReader" />.
            </summary>
      <param name="reader">
        <see cref="T:System.IO.BinaryReader" /> positioned at desired structure.</param>
      <typeparam name="T">Type of structure to read.</typeparam>
      <returns>A structure read from <see cref="T:System.IO.BinaryReader" />.</returns>
    </member>
    <member name="M:Gemstone.ArrayExtensions.ArrayExtensions.ValidateParameters``1(``0[],System.Int32,System.Int32)">
      <summary>
            Validates that the specified <paramref name="startIndex" /> and <paramref name="length" /> are valid within the given <paramref name="array" />.
            </summary>
      <param name="array">Array to validate.</param>
      <param name="startIndex">0-based start index into the <paramref name="array" />.</param>
      <param name="length">Valid number of items within <paramref name="array" /> from <paramref name="startIndex" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of array.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="array" /> length.
            </exception>
    </member>
    <member name="T:Gemstone.BitExtensions.BitExtensions">
      <summary>
            Defines extension methods related to bit operations.
            </summary>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Byte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Int16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Int32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.Int64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.SByte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.UInt16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.UInt32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotL(System.UInt64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Byte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Int16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Int32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.Int64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.SByte,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.UInt16,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.UInt32,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitRotR(System.UInt64,System.Int32)">
      <summary>
            Performs rightwise bit-rotation for the specified number of rotations.
            </summary>
      <param name="value">Value used for bit-rotation.</param>
      <param name="rotations">Number of rotations to perform.</param>
      <returns>Value that has its bits rotated to the right the specified number of times.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.BitVal(System.Int32)">
      <summary>
            Gets the bit value for the specified bit index (0 - 63).
            </summary>
      <param name="bit">Bit index (0 - 63)</param>
      <returns>Value of the specified <paramref name="bit" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Parameter must be between 0 and 63.</exception>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,System.Byte)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Byte,System.Byte,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,System.Int16)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int16,System.Int16,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,System.Int32)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int32,System.Int32,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,System.Int64)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.Int64,System.Int64,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,System.SByte)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.SByte,System.SByte,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,System.UInt16)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt16,System.UInt16,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,System.UInt32)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt32,System.UInt32,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,Gemstone.Bits,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,System.UInt64)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.CheckBits(System.UInt64,System.UInt64,System.Boolean)">
      <summary>
            Determines if specified <paramref name="bits" /> are set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to check.</param>
      <param name="allBits">true to check if all <paramref name="bits" /> are set; otherwise false.</param>
      <returns>true if specified <paramref name="bits" /> are set in <paramref name="source" /> value; otherwise false.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Byte,System.Byte)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int16,System.Int16)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int32,System.Int32)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.Int64,System.Int64)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.SByte,System.SByte)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt16,System.UInt16)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt32,System.UInt32)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to clear.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ClearBits(System.UInt64,System.UInt64)">
      <summary>
            Returns value with specified <paramref name="bits" /> cleared.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to clear.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> cleared.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Byte,System.Byte)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int16,System.Int16)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int32,System.Int32)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.Int64,System.Int64)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.SByte,System.SByte)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt16,System.UInt16)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt32,System.UInt32)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.GetMaskedValue(System.UInt64,System.UInt64)">
      <summary>
            Returns value stored in the bits represented by the specified <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Byte,System.Byte)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int16,System.Int16)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int32,System.Int32)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.Int64,System.Int64)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.SByte,System.SByte)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt16,System.UInt16)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt32,System.UInt32)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to set.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetBits(System.UInt64,System.UInt64)">
      <summary>
            Returns value with specified <paramref name="bits" /> set.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to set.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> set.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Byte,Gemstone.Bits,System.Byte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Byte,System.Byte,System.Byte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Byte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int16,Gemstone.Bits,System.Int16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int16,System.Int16,System.Int16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int32,Gemstone.Bits,System.Int32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int32,System.Int32,System.Int32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int64,Gemstone.Bits,System.Int64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.Int64,System.Int64,System.Int64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.Int64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.SByte,Gemstone.Bits,System.SByte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.SByte,System.SByte,System.SByte)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.SByte" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt16,Gemstone.Bits,System.UInt16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt16,System.UInt16,System.UInt16)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt16" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt32,Gemstone.Bits,System.UInt32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt32,System.UInt32,System.UInt32)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt64,Gemstone.Bits,System.UInt64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">
        <see cref="T:Gemstone.Bits" /> that make-up the bit-mask.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.SetMaskedValue(System.UInt64,System.UInt64,System.UInt64)">
      <summary>
            Returns value after setting a new <paramref name="value" /> for the bits specified by the <paramref name="bitmask" />.
            </summary>
      <param name="source">Value source.</param>
      <param name="bitmask">Bit-mask of the bits involved.</param>
      <param name="value">New value.</param>
      <returns>
        <see cref="T:System.UInt64" /> value.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Byte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Byte,System.Byte)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Byte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int16,System.Int16)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Int16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int32,System.Int32)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Int32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.Int64,System.Int64)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.Int64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.SByte,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.SByte,System.SByte)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.SByte" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt16,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt16,System.UInt16)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.UInt16" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt32,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt32,System.UInt32)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.UInt32" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt64,Gemstone.Bits)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">
        <see cref="T:Gemstone.Bits" /> to toggle.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="M:Gemstone.BitExtensions.BitExtensions.ToggleBits(System.UInt64,System.UInt64)">
      <summary>
            Returns value with specified <paramref name="bits" /> toggled.
            </summary>
      <param name="source">Value source.</param>
      <param name="bits">Bit-mask of the bits to toggle.</param>
      <returns>
        <see cref="T:System.UInt64" /> value with specified <paramref name="bits" /> toggled.</returns>
    </member>
    <member name="T:Gemstone.CharExtensions.CharExtensions">
      <summary>
            Defines extension functions related to character manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.ConvertHexToBitArray(System.Char)">
      <summary>
            Converts a hexadecimal character to a 4-bit integer equivalent.
            </summary>
      <param name="value">A valid hexadecimal character.</param>
      <returns>A 4-bit <see cref="T:System.Collections.BitArray" /> representing the integer equivalent of the given hexadecimal character.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.ConvertHexToInt(System.Char)">
      <summary>
            Converts a hexadecimal character to the integer equivalent.
            </summary>
      <param name="value">A valid hexadecimal character.</param>
      <returns>The integer equivalent of the given hexadecimal character.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsAnyOf(System.Char,System.Collections.Generic.IEnumerable{System.Char})">
      <summary>
            Determines if a character matches any character in a sent array.
            </summary>
      <param name="value">The character to check.</param>
      <param name="testChars">The array of characters to test.</param>
      <returns>Boolean value indicating a that the character is in the array.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsHex(System.Char)">
      <summary>
            Returns true if char is hexadecimal digit.
            </summary>
      <param name="value">The character to be tested.</param>
      <returns>true if char is hexadecimal digit; false otherwise</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsInRange(System.Char,System.Char,System.Char)">
      <summary>
            Tests a character to determine if it is between a specified character range
            </summary>
      <param name="value">Input character to process.</param>
      <param name="startOfRange">Beginning of range character.</param>
      <param name="endOfRange">End of range character.</param>
      <returns>
        <c>true</c> is the character is within the range.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsNumeric(System.Char)">
      <summary>
            Tests a character to determine if is a common part of a numeric string (digits or one of "+ - , .")
            </summary>
      <param name="value">The character to check.</param>
      <returns>
        <c>true</c> if numeric character.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.IsWordTerminator(System.Char)">
      <summary>
            Tests a character to determine if it marks the end of a typical English word.
            </summary>
      <param name="value">Input character to check.</param>
      <returns>
        <c>true</c> if character is a work separator.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.RegexEncode(System.Char)">
      <summary>
            Encodes the specified Unicode character in proper Regular Expression format.
            </summary>
      <param name="item">Unicode character to encode in Regular Expression format.</param>
      <returns>Specified Unicode character in proper Regular Expression format.</returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.ToLower(System.Char)">
      <summary>
            Converts <paramref name="value" /> to lower case.
            </summary>
      <param name="value">
        <see cref="T:System.Char" /> to convert to lower case.</param>
      <returns>
        <paramref name="value" /> converted to lower case.
            </returns>
    </member>
    <member name="M:Gemstone.CharExtensions.CharExtensions.ToUpper(System.Char)">
      <summary>
            Converts <paramref name="value" /> to upper case.
            </summary>
      <param name="value">
        <see cref="T:System.Char" /> to convert to upper case.</param>
      <returns>
        <paramref name="value" /> converted to upper case.
            </returns>
    </member>
    <member name="T:Gemstone.Collections.IPagedList">
      <summary>
            Defines an interface for <see cref="T:Gemstone.Collections.PagedList`1" /> instances that is usable
            regardless of any specified type.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.Page">
      <summary>
            Gets current page number.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.PageCount">
      <summary>
            Gets calculated page count based on page size and total items count.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.PageSize">
      <summary>
            Gets current page size.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.IPagedList.TotalCount">
      <summary>
            Gets total count of elements in enumeration.
            </summary>
    </member>
    <member name="T:Gemstone.Collections.PagedList`1">
      <summary>
            Defines a paged list for an enumeration.
            </summary>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1" /> to paginate.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Creates a new <see cref="T:Gemstone.Collections.PagedList`1" />.
            </summary>
      <param name="source">Source enumeration to paginate.</param>
      <param name="page">Page number (1-based).</param>
      <param name="pageSize">Page size.</param>
      <param name="count">Total records in source if known.</param>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.Page">
      <summary>
            Gets current page number.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.PageCount">
      <summary>
            Gets calculated page count based on page size and total items count.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.PageSize">
      <summary>
            Gets current page size.
            </summary>
    </member>
    <member name="P:Gemstone.Collections.PagedList`1.TotalCount">
      <summary>
            Gets total count of elements in enumeration.
            </summary>
    </member>
    <member name="T:Gemstone.Collections.CollectionExtensions.CollectionExtensions">
      <summary>
            Defines extension functions related to manipulation of arrays and collections.
            </summary>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or updated.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary after updating.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or whose value should be updated</param>
      <param name="addValueFactory">The function used to generate a value for an absent key</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or updated.</param>
      <param name="value">The value to be assigned to the key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary after updating.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``0,``1,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist,
            or updates a key/value pair in the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key already exists.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added or whose value should be updated</param>
      <param name="addValue">The value to be added for an absent key</param>
      <param name="updateValueFactory">The function used to generate a new value for an existing key based on the key's existing value</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The new value for the key. This will be either be the result of addValueFactory (if the key was absent) or the result of updateValueFactory (if the key was present).</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the specified <paramref name="items" /> to the <paramref name="collection" />.
            </summary>
      <param name="collection">The collection to which the <paramref name="items" /> are to be added.</param>
      <param name="items">The elements to be added to the <paramref name="collection" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="collection" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.All(System.Collections.BitArray,System.Boolean)">
      <summary>
            Returns <c>true</c> if all items in <see cref="T:System.Collections.BitArray" /> are equal to <paramref name="value" />.
            </summary>
      <param name="source">Source <see cref="T:System.Collections.BitArray" />.</param>
      <param name="value">
        <see cref="T:System.Boolean" /> value to test for.</param>
      <returns>
        <c>true</c> if all items in <see cref="T:System.Collections.BitArray" /> are equal to <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.AllParallel``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Threading.Tasks.ParallelOptions)">
      <summary>
            Determines whether all elements of a sequence satisfy a condition with each item being tested in parallel.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <param name="options">Any <see cref="T:System.Threading.Tasks.ParallelOptions" /> to apply.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <returns>
        <c>true</c> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <c>false</c>.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is <c>null</c>.</exception>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Any(System.Collections.BitArray,System.Boolean)">
      <summary>
            Returns <c>true</c> if any item in <see cref="T:System.Collections.BitArray" /> is equal to <paramref name="value" />.
            </summary>
      <param name="source">Source <see cref="T:System.Collections.BitArray" />.</param>
      <param name="value">
        <see cref="T:System.Boolean" /> value to test for.</param>
      <returns>
        <c>true</c> if any item in <see cref="T:System.Collections.BitArray" /> is equal to <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.CompareTo``1(``0[],``0[],System.Boolean)">
      <summary>Compares two arrays.</summary>
      <param name="array1">The first type array to compare to.</param>
      <param name="array2">The second type array to compare against.</param>
      <param name="orderIsImportant">
        <c>true</c> if order of elements should be considered for equality; otherwise, <c>false</c>.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of the array.</typeparam>
      <returns>An <see cref="T:System.Int32" /> which returns 0 if they are equal, 1 if <paramref name="array1" /> is larger, or -1 if <paramref name="array2" /> is larger.</returns>
      <exception cref="T:System.ArgumentException">Cannot compare multidimensional arrays.</exception>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Copy``1(``0[],System.Int32,System.Int32)">
      <summary>
            Returns a copy of the <see cref="T:System.Array" />.
            </summary>
      <param name="source">The source <see cref="T:System.Array" /> whose elements are to be copied.</param>
      <param name="startIndex">The source array index from where the elements are to be copied.</param>
      <param name="length">The number of elements to be copied starting from the startIndex.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of the <see cref="T:System.Array" /> to be copied.</typeparam>
      <returns>An <see cref="T:System.Array" /> of elements copied from the specified portion of the source <see cref="T:System.Array" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> is outside the range of valid indexes for the source <see cref="T:System.Array" /> -or-
            <paramref name="length" /> is less than 0.
            </exception>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
      <summary>
            Returns only the elements whose keys are distinct.
            </summary>
      <param name="source">The collection of source objects.</param>
      <param name="keySelector">The function used to access the keys of the source objects.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <typeparam name="TSource">The type of the source objects in the collection.</typeparam>
      <typeparam name="TKey">The type of the keys to be compared.</typeparam>
      <returns>The elements from <paramref name="source" /> whose keys are distinct.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added to the dictionary if it does not already exist.</param>
      <param name="valueFactory">The function used to generate a value for the key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2" /> if the key does not already exist.
            </summary>
      <param name="dictionary">The dictionary to add the key/value pair to if the key does not already exist.</param>
      <param name="key">The key to be added to the dictionary if it does not already exist.</param>
      <param name="value">The value to assign to the key if the key does not already exist.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Attempts to get the value for the given key and returns the default value instead if the key does not exist in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="dictionary">The dictionary to check for the given key.</param>
      <param name="key">The key to be checked for the existence of a value.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary or the default value if no such value exists.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
      <summary>
            Attempts to get the value for the given key and returns the default value instead if the key does not exist in the <see cref="T:System.Collections.Generic.IDictionary`2" />.
            </summary>
      <param name="dictionary">The dictionary to check for the given key.</param>
      <param name="key">The key to be checked for the existence of a value.</param>
      <param name="defaultValueFactory">The function used to generate the default value if no value exists for the given key.</param>
      <typeparam name="TKey">The type of the keys in the dictionary.</typeparam>
      <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
      <returns>The value of the key in the dictionary or the default value if no such value exists.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.GetRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
      <summary>
            Returns elements in the specified range from the <paramref name="collection" />.
            </summary>
      <param name="collection">The collection from which elements are to be retrieved.</param>
      <param name="index">The 0-based index position in the <paramref name="collection" /> from which elements are to be retrieved.</param>
      <param name="count">The number of elements to be retrieved from the <paramref name="collection" /> starting at the <paramref name="index" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="collection" />.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IList`1" /> object.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
      <summary>
            Returns the index of the first element of the sequence that satisfies a condition or <c>-1</c> if no such element is found.
            </summary>
      <param name="source">A <see cref="T:System.Collections.Generic.IList`1" /> to find an index in.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements of <paramref name="source" />.</typeparam>
      <returns>Index of the first element in <paramref name="source" /> that matches the specified <paramref name="predicate" />; otherwise, <c>-1</c>.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.Char,System.Func{System.String,``0})">
      <summary>Appends items parsed from delimited string, created with ToDelimitedString, into the given list.</summary>
      <param name="destination">The list we are adding items to.</param>
      <param name="delimitedString">The delimited string to parse for items.</param>
      <param name="delimiter">The <see cref="T:System.Char" /> value to look for in the <paramref name="delimitedString" /> as the delimiter.</param>
      <param name="convertFromString">Delegate that takes one parameter and converts from string to type TSource.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.Func{System.String,``0})">
      <summary>Appends items parsed from delimited string, created with ToDelimitedString, using the default
            delimiter ("|") into the given list.</summary>
      <param name="destination">The list we are adding items to.</param>
      <param name="delimitedString">The delimited string to parse for items.</param>
      <param name="convertFromString">Delegate that takes one parameter and converts from string to type TSource.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.LoadDelimitedString``1(System.Collections.Generic.IList{``0},System.String,System.String[],System.Func{System.String,``0})">
      <summary>Appends items parsed from delimited string, created with ToDelimitedString, into the given list.</summary>
      <param name="destination">The list we are adding items to.</param>
      <param name="delimitedString">The delimited string to parse for items.</param>
      <param name="delimiters">An array of delimiters to look for in the <paramref name="delimitedString" /> as the delimiter.</param>
      <param name="convertFromString">Delegate that takes a <see cref="T:System.String" /> and converts to type TSource.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Majority``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the majority value in the collection, or default type value if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Majority``1(System.Collections.Generic.IEnumerable{``0},``0,System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the majority value in the collection, or <paramref name="defaultValue" /> if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="defaultValue">Default value to return if no item represents the majority.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MajorityBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the majority value in the collection, or default type value if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The generic <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MajorityBy``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the majority value in the collection, or <paramref name="defaultValue" /> if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="defaultValue">Default value to return if no item represents the majority.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The generic <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Returns the largest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A comparer object.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>Returns the largest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A delegate that takes two generic types to compare, and returns an integer based on the comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Selects the largest item from the enumeration.</summary>
      <param name="source">An enumeration that contains the objects to be selected from.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of the objects to be selected from.</typeparam>
      <typeparam name="TKey">
        <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>Returns the largest item from the enumeration.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Median``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Gets the median item(s) from an enumeration, i.e., one return item for odd lengths, two for even lengths.
            </summary>
      <param name="source">An enumeration over which to find the median element(s).</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" /></typeparam>
      <returns>The median item(s) from an enumeration, or <c>null</c> if <paramref name="source" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Merge``3(``0,System.Boolean,System.Collections.Generic.IDictionary{``1,``2}[])">
      <summary>
            Merges elements of multiple dictionaries into a single dictionary.
            </summary>
      <param name="source">Source dictionary to merge with another dictionary.</param>
      <param name="overwriteExisting">Set to <c>true</c> to overwrite duplicate key values as they are encountered.</param>
      <param name="others">Other dictionaries to merge with source dictionary.</param>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> to merge.</typeparam>
      <typeparam name="TKey">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> keys.</typeparam>
      <typeparam name="TValue">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> values.</typeparam>
      <returns>A merged collection of all unique dictionary elements, all <paramref name="others" /> merged left to the source.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Merge``3(``0,System.Collections.Generic.IDictionary{``1,``2}[])">
      <summary>
            Merges elements of multiple dictionaries into a single dictionary with no duplicate key values overwritten.
            </summary>
      <param name="source">Source dictionary to merge with another dictionary.</param>
      <param name="others">Other dictionaries to merge with source dictionary.</param>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> to merge.</typeparam>
      <typeparam name="TKey">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> keys.</typeparam>
      <typeparam name="TValue">Type of <see cref="T:System.Collections.Generic.IDictionary`2" /> values.</typeparam>
      <returns>
            A merged collection of all unique dictionary elements, all <paramref name="others" /> merged left to the source with no duplicate
            key values overwritten (i.e., first encountered key value pair is the one that remains in the returned merged dictionary).
            </returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
      <summary>Returns the smallest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A comparer object.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,System.Int32})">
      <summary>Returns the smallest item from the enumeration.</summary>
      <param name="source">An enumeration that is compared against.</param>
      <param name="comparer">A delegate that takes two generic types to compare, and returns an integer based on the comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a generic type.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Selects the smallest item from the enumeration.</summary>
      <param name="source">An enumeration that contains the objects to be selected from.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of the objects to be selected from.</typeparam>
      <typeparam name="TKey">
        <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>Returns the smallest item from the enumeration.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Minority``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the minority value in the collection, or default type value if no item represents the minority.
            </summary>
      <param name="source">An enumeration over which to find the minority element.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The minority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Minority``1(System.Collections.Generic.IEnumerable{``0},``0,System.Boolean,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the minority value in the collection, or <paramref name="defaultValue" /> if no item represents the minority.
            </summary>
      <param name="source">An enumeration over which to find the minority element.</param>
      <param name="defaultValue">Default value to return if no item represents the minority.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <returns>The minority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MinorityBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the minority value in the collection, or default type value if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The generic <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The minority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.MinorityBy``2(System.Collections.Generic.IEnumerable{``0},``0,System.Func{``0,``1},System.Boolean,System.Collections.Generic.IEqualityComparer{``1})">
      <summary>
            Returns the minority value in the collection, or <paramref name="defaultValue" /> if no item represents the majority.
            </summary>
      <param name="source">An enumeration over which to find the majority element.</param>
      <param name="defaultValue">Default value to return if no item represents the majority.</param>
      <param name="keySelector">A delegate that takes an object and produces the key for comparison.</param>
      <param name="forwardSearch">
        <c>true</c> to search forward in <paramref name="source" />; otherwise <c>false</c> to search backwards.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing keys, or <c>null</c> to use the default comparer for the type of the key.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of elements in the <paramref name="source" />.</typeparam>
      <typeparam name="TKey">
        <see cref="T:System.Type" /> of the objects to be compared.</typeparam>
      <returns>The majority value in the collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.RemoveWhere``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
      <summary>
            Iterates through each item in the list. Allowing items to be removed from the list.
            </summary>
      <param name="list">the list to iterate though</param>
      <param name="shouldRemove">the function to call to determine 
            if the items should be removed from the list. </param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.List`1" />.</typeparam>
      <returns>
            The number of items removed from the list.
            </returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0})">
      <summary>
            Rearranges all the elements in the list into a highly-random order.
            </summary>
      <param name="source">The input list of generic types to scramble.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Rearranges all the elements in the list into a repeatable pseudo-random order.
            </summary>
      <param name="source">The input list of generic types to scramble.</param>
      <param name="seed">A number used to calculate a starting value for the pseudo-random number sequence.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts an enumeration to a string, using the default delimiter ("|") that can later be
            converted back to a list using LoadDelimitedString.</summary>
      <param name="source">The source object to be converted into a delimited string.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a <see cref="T:System.String" /> that is result of combining all elements in the list delimited by the '|' character.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.Char)">
      <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
      <param name="source">The source object to be converted into a delimited string.</param>
      <param name="delimiter">The delimiting character used.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a <see cref="T:System.String" /> that is result of combining all elements in the list delimited by <paramref name="delimiter" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDelimitedString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
      <summary>Converts an enumeration to a string that can later be converted back to a list using
            LoadDelimitedString.</summary>
      <param name="source">The source object to be converted into a delimited string.</param>
      <param name="delimiter">The delimiting <see cref="T:System.String" /> used.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
      <returns>Returns a <see cref="T:System.String" /> that is result of combining all elements in the list delimited by <paramref name="delimiter" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Converts a name/value collection to a dictionary.
            </summary>
      <param name="collection">Name/value collection.</param>
      <returns>Dictionary converted from a name/value collection.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32,System.Int32)">
      <summary>
            Gets a <see cref="T:Gemstone.Collections.PagedList`1" /> to paginate <paramref name="source" /> enumeration for
            a given <paramref name="page" /> and specified <paramref name="pageSize" />.
            </summary>
      <param name="source">Source enumeration to paginate.</param>
      <param name="page">Page number (1-based).</param>
      <param name="pageSize">Page size.</param>
      <param name="count">Total records in source if known.</param>
      <typeparam name="T">Type of <see cref="T:System.Collections.Generic.IEnumerable`1" /> to paginate.</typeparam>
      <returns>Set of items on a given <paramref name="page" /> for specified <paramref name="pageSize" />.</returns>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Unscramble``1(System.Collections.Generic.IList{``0},System.Int32)">
      <summary>
            Rearranges all the elements in the list previously scrambled with <see cref="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)" /> back into their original order.
            </summary>
      <param name="source">The input list of generic types to unscramble.</param>
      <param name="seed">The same number used in <see cref="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.Scramble``1(System.Collections.Generic.IList{``0},System.Int32)" /> call to scramble original list.</param>
      <typeparam name="TSource">
        <see cref="T:System.Type" /> of <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
    </member>
    <member name="M:Gemstone.Collections.CollectionExtensions.CollectionExtensions.UpdateRange``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Updates <paramref name="collection" /> starting at the <paramref name="index" /> with the specified <paramref name="items" />.
            </summary>
      <param name="collection">The collection whose elements are to be updated with the specified <paramref name="items" />.</param>
      <param name="index">The zero-based index in the <paramref name="collection" /> at which elements are to be updated.</param>
      <param name="items">The elements that will replace the <paramref name="collection" /> elements starting at the <paramref name="index" />.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of elements in the <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="index" /> is present in the <paramref name="collection" />.</exception>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute">
      <summary>
            Represents a <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> for validating Acronyms, i.e., expressions
            that consist only of upper case letters, numbers, '!', '-', '@', '#', '_' , '.' or '$'.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute" />.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute.DefaultErrorMessage">
      <summary>
            Defines the default error message used when pattern fails validation.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.AcronymValidationAttribute.ValidationPattern">
      <summary>
            Defines the regular expression pattern used to validate value. 
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute">
      <summary>
            Represents a <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> for validating e-mail addresses.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute" />.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute.DefaultErrorMessage">
      <summary>
            Defines the default error message used when pattern fails validation.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.EmailValidationAttribute.ValidationPattern">
      <summary>
            Defines the regular expression pattern used to validate value. 
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute">
      <summary>
            Defines an attribute that will define an initial value script for a modeled table field
            that will get evaluated and assigned in the target use environment, e.g., Javascript.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute" />/
            </summary>
      <param name="initialValueScript">Initial value expression for a modeled table field.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.InitialValueScriptAttribute.InitialValueScript">
      <summary>
            Gets the initial value expression for a modeled table field.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute">
      <summary>
            Defines an attribute that will define the field name that represents a record marked for deletion.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute" />.
            </summary>
      <param name="fieldName">Field name used as is-deleted record marker.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.IsDeletedFlagAttribute.FieldName">
      <summary>
            Field name used as is-deleted record marker.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.LabelAttribute">
      <summary>
            Defines an attribute that will define a UI label to used for a modeled table field.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.LabelAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.LabelAttribute" />.
            </summary>
      <param name="label">UI label for modeled table field.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.LabelAttribute.Label">
      <summary>
            Gets UI label for modeled table field.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute">
      <summary>
            Defines an attribute that will define the field name that best represents the row identification to a user.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute.#ctor(System.String)">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute" />.
            </summary>
      <param name="fieldName">Field name used as primary label.</param>
    </member>
    <member name="P:Gemstone.ComponentModel.DataAnnotations.PrimaryLabelAttribute.FieldName">
      <summary>
            Field name used as primary label.
            </summary>
    </member>
    <member name="T:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute">
      <summary>
            Represents a <see cref="T:System.ComponentModel.DataAnnotations.RegularExpressionAttribute" /> for validating URL's.
            </summary>
    </member>
    <member name="M:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute" />.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute.DefaultErrorMessage">
      <summary>
            Defines the default error message used when pattern fails validation.
            </summary>
    </member>
    <member name="F:Gemstone.ComponentModel.DataAnnotations.UrlValidationAttribute.ValidationPattern">
      <summary>
            Defines the regular expression pattern used to validate value. 
            </summary>
    </member>
    <member name="T:Gemstone.Console.Command">
      <summary>
            Defines methods related to command line operations
            </summary>
    </member>
    <member name="M:Gemstone.Console.Command.Execute(System.String,System.String,System.Int32)">
      <summary>
            Executes a command line operation and returns its standard output and exit code or throws an exception with the standard error.
            </summary>
      <param name="fileName">Command line file name to execute.</param>
      <param name="arguments">Command line arguments to use, if any.</param>
      <param name="timeout">Timeout, in milliseconds, to wait for command line operation to complete.</param>
      <returns>A <see cref="T:Gemstone.Console.CommandResponse" /> containing the standard output received from command and the exit code.</returns>
      <exception cref="T:Gemstone.Console.CommandException">
            Exception occurs when executed command process reports standard error output or process times-out.
            </exception>
    </member>
    <member name="M:Gemstone.Console.Command.Execute(System.String,System.String,System.String@,System.String@,System.Boolean@,System.Int32@,System.Int32)">
      <summary>
            Executes a command line operation and returns <c>true</c> if there was no standard error reported.
            </summary>
      <param name="fileName">Command line file name to execute.</param>
      <param name="arguments">Command line arguments to use, if any.</param>
      <param name="standardOutput">Any standard output reported by the command line operation.</param>
      <param name="standardError">Any standard error reported by the command line operation.</param>
      <param name="processCompleted">Flag that determines if process completed or timed-out. This is only relevant if <paramref name="timeout" /> is not -1.</param>
      <param name="exitCode">Exit code of the process, assuming process successfully completed.</param>
      <param name="timeout">Timeout, in milliseconds, to wait for command line operation to complete. Set to <see cref="F:System.Threading.Timeout.Infinite" />, i.e., -1, for infinite wait.</param>
      <returns>
        <c>true</c> if there was no standard error reported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Console.Command.Execute(System.String,System.String,System.String@,System.String@,System.Int32@)">
      <summary>
            Executes a command line operation and returns <c>true</c> if there was no standard error reported.
            </summary>
      <param name="fileName">Command line file name to execute.</param>
      <param name="arguments">Command line arguments to use, if any.</param>
      <param name="standardOutput">Any standard output reported by the command line operation.</param>
      <param name="standardError">Any standard error reported by the command line operation.</param>
      <param name="exitCode">Exit code of the process, assuming process successfully completed.</param>
      <returns>
        <c>true</c> if there was no standard error reported; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Console.Command.ShellDecode(System.String)">
      <summary>
            Decodes a command line parameter previously encoded by <see cref="M:Gemstone.Console.Command.ShellEncode(System.String)" />.
            </summary>
      <param name="parameter">Parameter to decode.</param>
      <returns>Decoded <paramref name="parameter" />.</returns>
    </member>
    <member name="M:Gemstone.Console.Command.ShellEncode(System.String)">
      <summary>
            Shell encodes a command line parameter by converting "\" to "\\".
            </summary>
      <param name="parameter">Parameter to shell encode.</param>
      <returns>Shell encoded <paramref name="parameter" />.</returns>
    </member>
    <member name="T:Gemstone.Console.CommandException">
      <summary>
            Represents an exception that is thrown when <see cref="M:Gemstone.Console.Command.Execute(System.String,System.String,System.Int32)" /> reports standard error output.
            </summary>
    </member>
    <member name="M:Gemstone.Console.CommandException.#ctor">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.CommandException" />.
            </summary>
    </member>
    <member name="M:Gemstone.Console.CommandException.#ctor(System.String,System.Boolean,System.Int32,System.Exception)">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.CommandException" /> with the specified parameters.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="processCompleted">Flag that determines if the source of command exception completed processing.</param>
      <param name="exitCode">Exit code of command process, assuming process successfully completed.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
    </member>
    <member name="P:Gemstone.Console.CommandException.ExitCode">
      <summary>
            Gets exit code from command process, assuming successful process completion.
            </summary>
    </member>
    <member name="P:Gemstone.Console.CommandException.ProcessCompleted">
      <summary>
            Gets flag that determines if the source of this command exception completed processing.
            </summary>
    </member>
    <member name="T:Gemstone.Console.CommandResponse">
      <summary>
            Represents a response that is returned from <see cref="M:Gemstone.Console.Command.Execute(System.String,System.String,System.Int32)" /> with standard output and exit code.
            </summary>
    </member>
    <member name="M:Gemstone.Console.CommandResponse.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new <see cref="T:Gemstone.Console.CommandResponse" />.
            </summary>
      <param name="standardOutput">Standard output of command process.</param>
      <param name="exitCode">Exit code of command process.</param>
    </member>
    <member name="P:Gemstone.Console.CommandResponse.ExitCode">
      <summary>
            Gets exit code from command process.
            </summary>
    </member>
    <member name="P:Gemstone.Console.CommandResponse.StandardOutput">
      <summary>
            Gets standard output reported by command process.
            </summary>
    </member>
    <member name="T:Gemstone.DateTimeExtensions.DateTimeExtensions">
      <summary>
            Defines extension functions related to Date/Time manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.AbbreviatedMonthName(System.DateTime)">
      <summary>Gets the abbreviated month name for month of the timestamp.</summary>
      <param name="timestamp">Timestamp from which month name is extracted.</param>
      <returns>String representation of the month name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.AbbreviatedWeekdayName(System.DateTime)">
      <summary>Gets the abbreviated weekday name for weekday of the timestamp.</summary>
      <param name="timestamp">Timestamp from which weekday name is extracted.</param>
      <returns>String representation of the weekday name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeTo(System.DateTime,System.String)">
      <summary>Converts given local time to time in specified time zone.</summary>
      <param name="timestamp">Timestamp in local time to be converted to time in specified time zone.</param>
      <param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given
            timestamp.</param>
      <returns>
        <para>Timestamp in specified time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeTo(System.DateTime,System.TimeZoneInfo)">
      <summary>Converts given local time to time in specified time zone.</summary>
      <param name="timestamp">Timestamp in local time to be converted to time in specified time zone.</param>
      <param name="destinationTimeZone">Desired end time zone for given timestamp.</param>
      <returns>
        <para>Timestamp in specified time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToCentralTime(System.DateTime)">
      <summary>Converts given local time to Central time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Central time.</param>
      <returns>
        <para>Timestamp in Central time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToEasternTime(System.DateTime)">
      <summary>Converts given local time to Eastern time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Eastern time.</param>
      <returns>
        <para>Timestamp in Eastern time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToMountainTime(System.DateTime)">
      <summary>Converts given local time to Mountain time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Mountain time.</param>
      <returns>
        <para>Timestamp in Mountain time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToPacificTime(System.DateTime)">
      <summary>Converts given local time to Pacific time.</summary>
      <param name="timestamp">Timestamp in local time to be converted to Pacific time.</param>
      <returns>
        <para>Timestamp in Pacific time.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.LocalTimeToUniversalTime(System.DateTime)">
      <summary>Converts given local time to Universally Coordinated Time (a.k.a., Greenwich Meridian Time).</summary>
      <param name="timestamp">Timestamp in local time to be converted to Universal time.</param>
      <returns>
        <para>Timestamp in UniversalTime (a.k.a., GMT).</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.MonthName(System.DateTime)">
      <summary>Gets the full month name for month of the timestamp.</summary>
      <param name="timestamp">Timestamp from which month name is extracted.</param>
      <returns>String representation of the month name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.ShortWeekdayName(System.DateTime)">
      <summary>Gets the shortest weekday name for weekday of the timestamp.</summary>
      <param name="timestamp">Timestamp from which weekday name is extracted.</param>
      <returns>String representation of the short weekday name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.TimeZoneToTimeZone(System.DateTime,System.String,System.String)">
      <summary>Converts given timestamp from one time zone to another using standard names for time zones.</summary>
      <param name="timestamp">Timestamp in source time zone to be converted to time in destination time zone.</param>
      <param name="sourceTimeZoneStandardName">Standard name of time zone for given source timestamp.</param>
      <param name="destinationTimeZoneStandardName">Standard name of desired end time zone for given source
            timestamp.</param>
      <returns>
        <para>Timestamp in destination time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.TimeZoneToTimeZone(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)">
      <summary>Converts given timestamp from one time zone to another.</summary>
      <param name="timestamp">Timestamp in source time zone to be converted to time in destination time
            zone.</param>
      <param name="sourceTimeZone">Time zone for given source timestamp.</param>
      <param name="destinationTimeZone">Desired end time zone for given source timestamp.</param>
      <returns>
        <para>Timestamp in destination time zone.</para>
      </returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeTo(System.DateTime,System.String)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to timestamp in specified time zone.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <param name="destinationTimeZoneStandardName">The time zone standard name to which the Universally
            Coordinated Time timestamp is to be converted to.</param>
      <returns>The timestamp in the specified time zone.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeTo(System.DateTime,System.TimeZoneInfo)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to timestamp in specified time zone.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <param name="destinationTimeZone">The time zone to which the Universally Coordinated Time timestamp
            is to be converted to.</param>
      <returns>The timestamp in the specified time zone.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToCentralTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Central time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Central time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToEasternTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Eastern time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Eastern time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToMountainTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Mountain time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Mountain time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.UniversalTimeToPacificTime(System.DateTime)">
      <summary>
            Converts the specified Universally Coordinated Time timestamp to Pacific time timestamp.
            </summary>
      <param name="universalTimestamp">The Universally Coordinated Time timestamp that is to be converted.</param>
      <returns>The timestamp in Pacific time.</returns>
    </member>
    <member name="M:Gemstone.DateTimeExtensions.DateTimeExtensions.WeekdayName(System.DateTime)">
      <summary>Gets the full weekday name for weekday of the timestamp.</summary>
      <param name="timestamp">Timestamp from which weekday name is extracted.</param>
      <returns>String representation of the weekday name based on <paramref name="timestamp" /></returns>
    </member>
    <member name="T:Gemstone.EnumExtensions.EnumExtensions">
      <summary>
            Defines extension methods related to enumerations.
            </summary>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetDescription(System.Enum)">
      <summary>
            Retrieves the description of the value that this <see cref="T:System.Enum" /> represents extracted from the <see cref="T:System.ComponentModel.DescriptionAttribute" />, or the enumeration name
            if no description is available.
            </summary>
      <param name="enumeration">
        <see cref="T:System.Enum" /> to operate on.</param>
      <returns>Description of the <see cref="T:System.Enum" /> if specified, otherwise the <see cref="T:System.String" /> representation of this <paramref name="enumeration" />.</returns>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueByDescription(System.String,System.Type,System.Boolean)">
      <summary>
            Gets the enumeration of the specified <paramref name="type" /> whose description matches this <paramref name="description" />.
            </summary>
      <param name="description">Description to be used for lookup of the enumeration.</param>
      <param name="type">
        <see cref="T:System.Type" /> of the enumeration.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore case during the comparison; otherwise, <c>false</c>.</param>
      <returns>An enumeration of the specified <paramref name="type" /> if a match is found, otherwise null.</returns>
      <exception cref="T:System.ArgumentException">The <paramref name="type" /> is not an enumeration.</exception>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueByName(System.String,System.Type,System.Boolean)">
      <summary>
            Gets the enumeration value with the specified name.
            </summary>
      <param name="name">Name to search for.</param>
      <param name="type">
        <see cref="T:System.Type" /> of the enumeration.</param>
      <param name="ignoreCase">
        <c>true</c> to ignore case during the comparison; otherwise, <c>false</c>.</param>
      <returns>Specific value of the enumerated constant in terms of its underlying type associated with the specified <paramref name="name" />, or <c>null</c>
            if no matching enumerated value was found.</returns>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueOrDefault``1(System.Object,System.Object)">
      <summary>
            Gets the enumeration constant for this value, if defined in the enumeration, or a default value.
            </summary>
      <param name="value">Value to attempt to return from enumeration.</param>
      <param name="defaultValue">Value to return if enumeration value is not found.</param>
      <typeparam name="T">Type of enumeration.</typeparam>
      <returns>Enumeration value specified, if found, or a default value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> is not an enum. -or-
            The type of <paramref name="value" /> is not of type <typeparamref name="T" />. -or-
            The type of <paramref name="value" /> is not an underlying type of <typeparamref name="T" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />,
            <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />,
            <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.
            </exception>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetEnumValueOrDefault(System.Object,System.Type,System.Object)">
      <summary>
            Gets the enumeration constant for value, if defined in the enumeration, or a default value.
            </summary>
      <param name="value">Value to attempt to return from enumeration.</param>
      <param name="type">
        <see cref="T:System.Type" /> of the enumeration.</param>
      <param name="defaultValue">Value to return if enumeration value is not found.</param>
      <returns>Enumeration value specified, if found, or a default value.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not an enum. -or-
            The type of <paramref name="value" /> is not of type <paramref name="type" />. -or-
            The type of <paramref name="value" /> is not an underlying type of <paramref name="type" />.
            </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is not type <see cref="T:System.SByte" />, <see cref="T:System.Int16" />,
            <see cref="T:System.Int32" />, <see cref="T:System.Int64" />, <see cref="T:System.Byte" />, <see cref="T:System.UInt16" />,
            <see cref="T:System.UInt32" />, or <see cref="T:System.UInt64" />, or <see cref="T:System.String" />.
            </exception>
    </member>
    <member name="M:Gemstone.EnumExtensions.EnumExtensions.GetFormattedName(System.Enum)">
      <summary>
            Retrieves a formatted name of the value that this <see cref="T:System.Enum" /> represents for visual display.
            </summary>
      <param name="enumeration">
        <see cref="T:System.Enum" /> to operate on.</param>
      <returns>Formatted enumeration name of the specified value for visual display.</returns>
    </member>
    <member name="T:Gemstone.GuidExtensions.GuidExtensions">
      <summary>
            Extension methods for <see cref="T:System.Guid" />.
            </summary>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.CopyLittleEndianBytes(System.Guid,System.Byte*)">
      <summary>
            Writes a <see cref="T:System.Guid" /> in Little Endian byte order.
            </summary>
      <param name="guid">the <see cref="T:System.Guid" /> to serialize</param>
      <param name="buffer">where to store the <paramref name="guid" /></param>
      <returns>Bytes written.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.CopyLittleEndianBytes(System.Guid,System.Byte[],System.Int32)">
      <summary>
            Writes a <see cref="T:System.Guid" /> in Little Endian byte order.
            </summary>
      <param name="guid">the <see cref="T:System.Guid" /> to serialize</param>
      <param name="buffer">where to store the <paramref name="guid" /></param>
      <param name="startingIndex">the starting index in <paramref name="buffer" /></param>
      <returns>Bytes written.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianBytes(System.Guid)">
      <summary>
            Gets the little endian encoded bytes of the <see cref="T:System.Guid" />.
            </summary>
      <param name="guid">the <see cref="T:System.Guid" /> to serialize</param>
      <returns>A <see cref="T:System.Byte" />[] that represents a big endian encoded Guid.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianGuid(System.Byte*)">
      <summary>
            Reads a Guid in Little Endian byte order.
            </summary>
      <param name="buffer">where to read the <see cref="T:System.Guid" />.</param>
      <returns>Decoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianGuid(System.Byte[])">
      <summary>
            Reads a <see cref="T:System.Guid" /> in Little Endian byte order.
            </summary>
      <param name="buffer">where to read the <see cref="T:System.Guid" />.</param>
      <returns>Decoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToLittleEndianGuid(System.Byte[],System.Int32)">
      <summary>
            Mimicks the encoding that was present in LittleEndianOrder on a Little Endian CPU. 
            </summary>
      <param name="buffer">where to read the <see cref="T:System.Guid" />.</param>
      <param name="startingIndex">the starting index in <paramref name="buffer" /></param>
      <returns>Decoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcBytes(System.Guid)">
      <summary>
            Encodes a <see cref="T:System.Guid" /> following RFC 4122.
            </summary>
      <param name="guid">
        <see cref="T:System.Guid" /> to serialize.</param>
      <returns>A <see cref="T:System.Byte" /> array that represents a big-endian encoded <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcBytes(System.Guid,System.Byte*)">
      <summary>
            Encodes a <see cref="T:System.Guid" /> following RFC 4122.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> to serialize.</param>
      <param name="buffer">Destination buffer to hold serialized <paramref name="guid" />.</param>
      <returns>Bytes encoded.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcBytes(System.Guid,System.Byte[],System.Int32)">
      <summary>
            Encodes a <see cref="T:System.Guid" /> following RFC 4122.
            </summary>
      <param name="guid">The <see cref="T:System.Guid" /> to serialize.</param>
      <param name="buffer">Destination buffer to hold serialized <paramref name="guid" />.</param>
      <param name="startingIndex">Starting index in <paramref name="buffer" />.</param>
      <returns>Bytes encoded.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcGuid(System.Byte*)">
      <summary>
            Decodes a <see cref="T:System.Guid" /> following RFC 4122
            </summary>
      <param name="buffer">Buffer containing a serialized big-endian encoded <see cref="T:System.Guid" />.</param>
      <returns>
        <see cref="T:System.Guid" /> deserialized from <paramref name="buffer" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcGuid(System.Byte[])">
      <summary>
            Decodes a <see cref="T:System.Guid" /> following RFC 4122
            </summary>
      <param name="buffer">Buffer containing a serialized big-endian encoded <see cref="T:System.Guid" />.</param>
      <returns>
        <see cref="T:System.Guid" /> deserialized from <paramref name="buffer" />.</returns>
    </member>
    <member name="M:Gemstone.GuidExtensions.GuidExtensions.ToRfcGuid(System.Byte[],System.Int32)">
      <summary>
            Decodes a <see cref="T:System.Guid" /> following RFC 4122
            </summary>
      <param name="buffer">Buffer containing a serialized big-endian encoded <see cref="T:System.Guid" />.</param>
      <param name="startingIndex">Starting index in <paramref name="buffer" />.</param>
      <returns>
        <see cref="T:System.Guid" /> deserialized from <paramref name="buffer" />.</returns>
    </member>
    <member name="T:Gemstone.IO.BlockAllocatedMemoryStream">
      <summary>
            Defines a stream whose backing store is memory. Externally this class operates similar to a <see cref="T:System.IO.MemoryStream" />,
            internally it uses dynamically allocated buffer blocks instead of one large contiguous array of data.
            </summary>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" />.
            </summary>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> from specified <paramref name="buffer" />.
            </summary>
      <param name="buffer">Initial buffer to copy into stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> from specified region of <paramref name="buffer" />.
            </summary>
      <param name="buffer">Initial buffer to copy into stream.</param>
      <param name="startIndex">0-based start index into the <paramref name="buffer" />.</param>
      <param name="length">Valid number of bytes within <paramref name="buffer" /> from <paramref name="startIndex" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> for specified <paramref name="capacity" />.
            </summary>
      <param name="capacity">Initial length of the stream.</param>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.CanRead">
      <summary>
            Gets a value that indicates whether the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object supports reading.
            </summary>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.CanSeek">
      <summary>
            Gets a value that indicates whether the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object supports seeking.
            </summary>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.CanWrite">
      <summary>
            Gets a value that indicates whether the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object supports writing.
            </summary>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Clear">
      <summary>
            Clears the entire <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> contents and releases any allocated memory blocks.
            </summary>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> object and optionally releases the managed resources.
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; otherwise, <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Flush">
      <summary>
            Overrides the <see cref="M:System.IO.Stream.Flush" /> method so that no action is performed.
            </summary>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.Length">
      <summary>
            Gets current stream length for this <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> instance.
            </summary>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="P:Gemstone.IO.BlockAllocatedMemoryStream.Position">
      <summary>
            Gets current stream position for this <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" /> instance.
            </summary>
      <exception cref="T:System.IO.IOException">Seeking was attempted before the beginning of the stream.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads a block of bytes from the current stream and writes the data to <paramref name="buffer" />.
            </summary>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="startIndex" /> and (<paramref name="startIndex" /> + <paramref name="length" /> - 1) replaced by the characters read from the current stream.</param>
      <param name="startIndex">The byte offset in <paramref name="buffer" /> at which to begin reading.</param>
      <param name="length">The maximum number of bytes to read.</param>
      <returns>
            The total number of bytes written into the buffer. This can be less than the number of bytes requested if that number of bytes are not currently available, or zero if the end of the stream is reached before any bytes are read.
            </returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.ReadByte">
      <summary>
            Reads a byte from the current stream.
            </summary>
      <returns>
            The current byte cast to an <see cref="T:System.Int32" />, or -1 if the end of the stream has been reached.
            </returns>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.ReadFrom(System.IO.Stream,System.Int64)">
      <summary>
            Reads specified number of bytes from source stream into this <see cref="T:Gemstone.IO.BlockAllocatedMemoryStream" />
            starting at the current position.
            </summary>
      <param name="source">The stream containing the data to copy</param>
      <param name="length">The number of bytes to copy</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>
            Sets the <see cref="P:Gemstone.IO.BlockAllocatedMemoryStream.Position" /> within the current stream to the specified value relative the <paramref name="origin" />.
            </summary>
      <param name="offset">The new position within the stream. This is relative to the <paramref name="origin" /> parameter, and can be positive or negative.</param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" />, which acts as the seek reference point.</param>
      <returns>
            The new position within the stream, calculated by combining the initial reference point and the offset.
            </returns>
      <exception cref="T:System.IO.IOException">Seeking was attempted before the beginning of the stream.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.SetLength(System.Int64)">
      <summary>
            Sets the length of the current stream to the specified value.
            </summary>
      <param name="value">The value at which to set the length.</param>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.ToArray">
      <summary>
            Writes the stream contents to a byte array, regardless of the <see cref="P:Gemstone.IO.BlockAllocatedMemoryStream.Position" /> property.
            </summary>
      <returns>A <see cref="T:System.Byte" />[] containing the current data in the stream</returns>
      <exception cref="T:System.InvalidOperationException">Cannot create a byte array with more than 2,147,483,591 elements.</exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
            Writes a block of bytes to the current stream using data read from <paramref name="buffer" />.
            </summary>
      <param name="buffer">The buffer to write data from.</param>
      <param name="startIndex">The byte offset in <paramref name="buffer" /> at which to begin writing from.</param>
      <param name="length">The maximum number of bytes to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> or <paramref name="length" /> is less than 0 -or- 
            <paramref name="startIndex" /> and <paramref name="length" /> will exceed <paramref name="buffer" /> length.
            </exception>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.WriteByte(System.Byte)">
      <summary>
            Writes a byte to the current stream at the current position.
            </summary>
      <param name="value">The byte to write.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="M:Gemstone.IO.BlockAllocatedMemoryStream.WriteTo(System.IO.Stream)">
      <summary>
            Writes the entire stream into destination, regardless of <see cref="P:Gemstone.IO.BlockAllocatedMemoryStream.Position" />, which remains unchanged.
            </summary>
      <param name="destination">The stream onto which to write the current contents.</param>
      <exception cref="T:System.ObjectDisposedException">The stream is closed.</exception>
    </member>
    <member name="T:Gemstone.IO.FilePath">
      <summary>
            Contains File and Path manipulation methods.
            </summary>
    </member>
    <member name="M:Gemstone.IO.FilePath.AddPathSuffix(System.String)">
      <summary>
            Makes sure path is suffixed with standard <see cref="F:System.IO.Path.DirectorySeparatorChar" />.
            </summary>
      <param name="filePath">The file path to be suffixed.</param>
      <returns>Suffixed path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.DropPathRoot(System.String)">
      <summary>
            Remove any path root present in the path.
            </summary>
      <param name="filePath">The file path whose root is to be removed.</param>
      <returns>The path with the root removed if it was present.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.EnumerateDirectories(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of directories in <paramref name="path" />. This parameter can contain a combination of valid literal path and wild-card (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
      <param name="exceptionHandler">Handles exceptions thrown during directory enumeration.</param>
      <returns>An enumerable collection of the full names (including paths) for the directories in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.EnumerateFiles(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns an enumerable collection of file names that match a search pattern in a specified path, and optionally searches subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. This parameter can contain a combination of valid literal path and wild-card (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include only the current directory or should include all subdirectories.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>An enumerable collection of the full names (including paths) for the files in the directory specified by <paramref name="path" /> and that match the specified search pattern and option.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetAbsolutePath(System.String)">
      <summary>
            Gets the absolute file path for the specified file name or relative file path.
            </summary>
      <param name="filePath">File name or relative file path.</param>
      <returns>Absolute file path for the specified file name or relative file path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetApplicationDataFolder">
      <summary>
            Gets the path to the folder where data related to the current application can be stored.
            </summary>
      <returns>Path to the folder where data related to the current application can be stored.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetAvailableFreeSpace(System.String,System.Int64@,System.Int64@)">
      <summary>
            Tries to get the free space values for a given path. This path can be a network share or a mount point.
            </summary>
      <param name="pathName">The path to the location</param>
      <param name="freeSpace">The number of user space bytes</param>
      <param name="totalSize">The total number of bytes on the drive.</param>
      <returns>
        <c>true</c> if successful; otherwise <c>false</c> if there was an error.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetCommonApplicationDataFolder">
      <summary>
            Gets the path to the folder where data related to the current
            application can be stored as well as shared among different users.
            </summary>
      <returns>Path to the folder where data related to the current application can be stored.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetDirectories(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns the names of the subdirectories (including their paths) that match the specified search pattern in the specified directory, and optionally searches subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of subdirectories in <paramref name="path" />. This parameter can contain a combination of valid literal and wild-card characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
      <param name="exceptionHandler">Handles exceptions thrown during directory enumeration.</param>
      <returns>An array of the full names (including paths) of the subdirectories that match the specified criteria, or an empty array if no directories are found.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetDirectoryName(System.String)">
      <summary>
            Gets the directory information from the specified file path.
            </summary>
      <param name="filePath">The file path from which the directory information is to be obtained.</param>
      <returns>Directory information.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetExtension(System.String)">
      <summary>
            Gets the extension from the specified file path.
            </summary>
      <param name="filePath">The file path from which the extension is to be obtained.</param>
      <returns>File extension.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileLength(System.String)">
      <summary>
            Gets the size of the specified file.
            </summary>
      <param name="fileName">Name of file whose size is to be retrieved.</param>
      <returns>The size of the specified file.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileList(System.String,System.Action{System.Exception})">
      <summary>
            Gets a list of files under the specified path. Search wild card pattern (c:\Data\*.dat) can be used for 
            including only the files matching the pattern or path wild-card pattern (c:\Data\*\*.dat) to indicate the 
            inclusion of files under all subdirectories in the list.
            </summary>
      <param name="path">The path for which a list of files is to be returned.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>A list of files under the given path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileLock``1(System.String,System.Func{System.String,``0},System.Double,System.Int32)">
      <summary>
             Gets a lock on the file using the given lock function.
             </summary>
      <param name="fileName">The name of the on which the lock is to be obtained.</param>
      <param name="lockFunction">The function to be called in order to get the file lock.</param>
      <param name="secondsToWait">The number of seconds to wait before giving up on the file lock.</param>
      <param name="retryMilliseconds">The number of milliseconds to wait between attempts to obtain the file lock.</param>
      <typeparam name="T">The return value of the lock function.</typeparam>
      <returns>The return value of the lock function.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileName(System.String)">
      <summary>
            Gets the file name and extension from the specified file path.
            </summary>
      <param name="filePath">The file path from which the file name and extension is to be obtained.</param>
      <returns>File name and extension if the file path has it; otherwise empty string.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFileNameWithoutExtension(System.String)">
      <summary>
            Gets the file name without extension from the specified file path.
            </summary>
      <param name="filePath">The file path from which the file name is to be obtained.</param>
      <returns>File name without the extension if the file path has it; otherwise empty string.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFilePatternRegularExpression(System.String)">
      <summary>
            Gets a regular expression pattern that simulates wild-card matching for filenames (wild-cards are defined as '*' or '?' characters).
            </summary>
      <param name="fileSpec">The file spec for which the regular expression pattern if to be generated.</param>
      <returns>Regular expression pattern that simulates wild-card matching for filenames.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetFiles(System.String,System.String,System.IO.SearchOption,System.Action{System.Exception})">
      <summary>
            Returns the names of files (including their paths) that match the specified search pattern in the specified directory, using a value to determine whether to search subdirectories.
            </summary>
      <param name="path">The relative or absolute path to the directory to search. This string is not case-sensitive.</param>
      <param name="searchPattern">The search string to match against the names of files in <paramref name="path" />. This parameter can contain a combination of valid literal path and wild-card (* and ?) characters, but doesn't support regular expressions.</param>
      <param name="searchOption">One of the enumeration values that specifies whether the search operation should include all subdirectories or only the current directory.</param>
      <param name="exceptionHandler">Handles exceptions thrown during file enumeration.</param>
      <returns>An array of the full names (including paths) for the files in the specified directory that match the specified search pattern and option, or an empty array if no files are found.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetLastDirectoryName(System.String)">
      <summary>
            Gets the last directory name from a file path.
            </summary>
      <param name="filePath">The file path from where the last directory name is to be retrieved.</param>
      <returns>The last directory name from a file path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetUniqueFilePath(System.String)">
      <summary>
            Gets a unique file path for the given file by checking for name collisions and
            adding a sequence number to the end of the file name if there is a collision.
            </summary>
      <param name="originalFilePath">The path to the original file before adding the sequence number.</param>
      <returns>The unique path to the file.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetUniqueFilePathWithBinarySearch(System.String)">
      <summary>
            Gets a unique file path for the given file by checking for name collisions and
            adding a sequence number to the end of the file name if there is a collision.
            </summary>
      <param name="originalFilePath">The path to the original file before adding the sequence number.</param>
      <returns>The unique path to the file.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetValidFileName(System.String,System.Char)">
      <summary>
            Gets a valid file name by replacing invalid file name characters with <paramref name="replaceWithCharacter" />.
            </summary>
      <param name="fileName">File name to validate.</param>
      <param name="replaceWithCharacter">Character to replace invalid file name characters with. Set to '\0' to remove invalid file name characters.</param>
      <returns>A valid file name with no invalid file name characters.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.GetValidFilePath(System.String,System.Char)">
      <summary>
            Gets a valid file path by replacing invalid file or directory name characters with <paramref name="replaceWithCharacter" />.
            </summary>
      <param name="filePath">File path to validate.</param>
      <param name="replaceWithCharacter">Character to replace invalid file or directory name characters with. Set to '\0' to remove invalid file or directory name characters.</param>
      <returns>A valid file path with no invalid file or directory name characters.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.InApplicationPath(System.String)">
      <summary>
            Determines if the specified <paramref name="filePath" /> is contained with the current executable path.
            </summary>
      <param name="filePath">File name or relative file path.</param>
      <returns>
        <c>true</c> if the specified <paramref name="filePath" /> is contained with the current executable path; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.IsFilePatternMatch(System.String,System.String,System.Boolean)">
      <summary>
            Determines whether the specified file name matches the given file spec (wild-cards are defined as '*' or '?' characters).
            </summary>
      <param name="fileSpec">The file spec used for matching the specified file name.</param>
      <param name="filePath">The file path to be tested against the specified file spec for a match.</param>
      <param name="ignoreCase">
        <c>true</c> to specify a case-insensitive match; otherwise <c>false</c>.</param>
      <returns>
        <c>true</c> if the specified file name matches the given file spec; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:Gemstone.IO.FilePath.IsFilePatternMatch(System.String[],System.String,System.Boolean)">
      <summary>
            Determines whether the specified file name matches any of the given file specs (wild-cards are defined as '*' or '?' characters).
            </summary>
      <param name="fileSpecs">The file specs used for matching the specified file name.</param>
      <param name="filePath">The file path to be tested against the specified file specs for a match.</param>
      <param name="ignoreCase">
        <c>true</c> to specify a case-insensitive match; otherwise <c>false</c>.</param>
      <returns>
        <c>true</c> if the specified file name matches any of the given file specs; otherwise <c>false</c>.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="filePath" /> contains one or more of the invalid characters defined in <see cref="M:System.IO.Path.GetInvalidPathChars" />.</exception>
    </member>
    <member name="M:Gemstone.IO.FilePath.IsValidFileName(System.String)">
      <summary>
            Determines if the specified file name and path is valid.
            </summary>
      <param name="filePath">The file name with optional path to test for validity.</param>
      <returns>
        <c>true</c> if the specified <paramref name="filePath" /> is a valid name; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.RemovePathSuffix(System.String)">
      <summary>
            Makes sure path is not suffixed with <see cref="F:System.IO.Path.DirectorySeparatorChar" /> or <see cref="F:System.IO.Path.AltDirectorySeparatorChar" />.
            </summary>
      <param name="filePath">The file path to be unsuffixed.</param>
      <returns>Unsuffixed path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TrimFileName(System.String,System.Int32)">
      <summary>
            Returns a file name, for display purposes, of the specified length using "..." to indicate a longer name.
            </summary>
      <param name="filePath">The file path to be trimmed.</param>
      <param name="length">The maximum length of the trimmed file path.</param>
      <returns>Trimmed file path.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TryGetReadLock(System.String)">
      <summary>
            Attempts to get read access on a file.
            </summary>
      <param name="fileName">The file to check for read access.</param>
      <returns>True if read access is obtained; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TryGetReadLockExclusive(System.String)">
      <summary>
            Attempts to get read access on a file.
            </summary>
      <param name="fileName">The file to check for read access.</param>
      <returns>True if read access is obtained; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.TryGetWriteLock(System.String)">
      <summary>
            Attempts to get write access on a file.
            </summary>
      <param name="fileName">The file to check for write access.</param>
      <returns>True if write access is obtained; false otherwise.</returns>
    </member>
    <member name="M:Gemstone.IO.FilePath.ValidatePathName(System.String)">
      <summary>
            Ensures the supplied path name is valid.
            </summary>
      <param name="filePath">The file path to be validated.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLock(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for read access on a file.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLock(System.String,System.Double)">
      <summary>
            Waits for read access on a file for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
      <param name="secondsToWait">The time to wait for in seconds to obtain read access on a file. Set to zero to wait infinitely.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLockExclusive(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for read access on a file.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForReadLockExclusive(System.String,System.Double)">
      <summary>
            Waits for read access on a file for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain read access.</param>
      <param name="secondsToWait">The time to wait for in seconds to obtain read access on a file. Set to zero to wait infinitely.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForWriteLock(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for write access on a file.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain write access.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitForWriteLock(System.String,System.Double)">
      <summary>
            Waits for write access on a file for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for to obtain write access.</param>
      <param name="secondsToWait">The time to wait for in seconds to obtain write access on a file. Set to zero to wait infinitely.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitTillExists(System.String)">
      <summary>
            Waits for the default duration (5 seconds) for a file to exist.
            </summary>
      <param name="fileName">The name of the file to wait for until it is created.</param>
    </member>
    <member name="M:Gemstone.IO.FilePath.WaitTillExists(System.String,System.Double)">
      <summary>
            Waits for a file to exist for the specified number of seconds.
            </summary>
      <param name="fileName">The name of the file to wait for until it is created.</param>
      <param name="secondsToWait">The time to wait for in seconds for the file to be created. Set to zero to wait infinitely.</param>
    </member>
    <member name="T:Gemstone.Reflection.AppDomainTypeLookup">
      <summary>
            Defines a lookup class that searches all assemblies in the current <see cref="T:System.AppDomain" /> for all <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AppDomainTypeLookup.#ctor">
      <summary>
            Creates a AppDomainTypeLookup
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AppDomainTypeLookup.FindTypes">
      <summary>
            Searches all assemblies of this <see cref="T:System.AppDomain" /> for all <see cref="T:System.Type" />s.
            </summary>
      <returns>List of founf types.</returns>
    </member>
    <member name="P:Gemstone.Reflection.AppDomainTypeLookup.HasChanged">
      <summary>
            Gets flag that determines if there is a possibility that a new assembly has been loaded and new types are available.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AssemblyInfo">
      <summary>
            Represents a common information provider for an assembly.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.#ctor(System.Reflection.Assembly)">
      <summary>Initializes a new instance of the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> class.</summary>
      <param name="assemblyInstance">An <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> object.</param>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Assembly">
      <summary>
            Gets the underlying <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> being represented by this <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.BuildDate">
      <summary>
            Gets the date and time when the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> was built.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CallingAssembly">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object of the assembly that invoked the currently executing method.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CLSCompliant">
      <summary>
            Gets a boolean value indicating whether the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> is CLS-compliant.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CodeBase">
      <summary>
            Gets the location of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> as specified originally.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ComCompatibleVersion">
      <summary>
            Gets the string representing the assembly version used to indicate to a COM client that all classes
            in the current version of the assembly are compatible with classes in an earlier version of the assembly.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Company">
      <summary>
            Gets the company name information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ComVisible">
      <summary>
            Gets a boolean value indicating if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> is exposed to COM.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Configuration">
      <summary>
            Gets the configuration information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Copyright">
      <summary>
            Gets the copyright information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.CultureName">
      <summary>
            Gets the culture name of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Debuggable">
      <summary>
            Gets a boolean value indicating if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> was built in debug mode.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.DelaySign">
      <summary>
            Gets a boolean value indicating if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> has been built as delay-signed.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Description">
      <summary>
            Gets the description information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.EntryAssembly">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object of the process executable in the default application domain.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ExecutingAssembly">
      <summary>
            Gets the <see cref="T:Gemstone.Reflection.AssemblyInfo" /> object of the assembly that contains the code that is currently executing.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.FindType(System.String)">
      <summary>
            Finds the specified <paramref name="typeName" /> searching through all loaded assemblies.
            </summary>
      <param name="typeName">Fully qualified type name.</param>
      <returns>The <see cref="T:System.Type" /> found; otherwise <c>null</c>.</returns>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.FullName">
      <summary>
            Gets the display name of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.GACLoaded">
      <summary>
            Gets a boolean value indicating whether the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> was loaded from the global assembly cache.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.GetAttributes">
      <summary>
            Gets a collection of assembly attributes exposed by the assembly.
            </summary>
      <returns>A System.Specialized.KeyValueCollection of assembly attributes.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.GetCustomAttribute(System.Type)">
      <summary>
            Gets the specified assembly attribute if it is exposed by the assembly.
            </summary>
      <param name="attributeType">Type of the attribute to get.</param>
      <returns>The requested assembly attribute if it exists; otherwise null.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.GetEmbeddedResource(System.String)">
      <summary>
            Gets the specified embedded resource from the assembly.
            </summary>
      <param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
      <returns>The embedded resource.</returns>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Guid">
      <summary>
            Gets the GUID that is used as an ID if the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" /> is exposed to COM.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.ImageRuntimeVersion">
      <summary>
            Gets the string representing the version of the common language runtime (CLR) saved in the file
            containing the manifest.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.InformationalVersion">
      <summary>
            Gets the version information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.KeyFile">
      <summary>
            Gets the name of the file containing the key pair used to generate a strong name for the attributed <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyInfo.LoadAssemblyFromResource(System.String)">
      <summary>
            Loads the specified assembly that is embedded as a resource in the assembly.
            </summary>
      <param name="assemblyName">Name of the assembly to load.</param>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Location">
      <summary>
            Gets the path or UNC location of the loaded file that contains the manifest.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Name">
      <summary>
            Gets the simple, unencrypted name of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Product">
      <summary>
            Gets the product name information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.RootNamespace">
      <summary>
            Gets the root namespace of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.SatelliteContractVersion">
      <summary>
            Gets the assembly version used to instruct the System.Resources.ResourceManager to ask for a particular
            version of a satellite assembly to simplify updates of the main assembly of an application.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Title">
      <summary>
            Gets the title information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Trademark">
      <summary>
            Gets the trademark information of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyInfo.Version">
      <summary>
            Gets the major, minor, revision, and build numbers of the <see cref="P:Gemstone.Reflection.AssemblyInfo.Assembly" />.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AssemblyLoadedVersionNumber">
      <summary>
            Maintains a version number that increments every time an <see cref="E:System.AppDomain.AssemblyLoad" /> event is raised.
            </summary>
    </member>
    <member name="P:Gemstone.Reflection.AssemblyLoadedVersionNumber.VersionNumber">
      <summary>
            The number of times that the AppDomains's assembly could have changed; initial value starts at 1.
            </summary>
    </member>
    <member name="T:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions">
      <summary>
            Defines extension functions related to Assemblies.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.BuildDate(System.Reflection.Assembly)">
      <summary>
            Gets the date and time when the assembly was last built.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The date and time when the assembly was last built.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.CLSCompliant(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating whether the indicated program element is CLS-compliant.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the program element is CLS-compliant; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.ComCompatibleVersion(System.Reflection.Assembly)">
      <summary>
            Gets the string representing the assembly version used to indicate to a COM client that all classes in the
            current version of the assembly are compatible with classes in an earlier version of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The string representing the assembly version in MajorVersion.MinorVersion.RevisionNumber.BuildNumber format.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Company(System.Reflection.Assembly)">
      <summary>
            Gets the company name information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The company name information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.ComVisible(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating if the assembly is exposed to COM.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the assembly is exposed to COM; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Configuration(System.Reflection.Assembly)">
      <summary>
            Gets the configuration information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The configuration information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Copyright(System.Reflection.Assembly)">
      <summary>
            Gets the copyright information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The copyright information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.CultureName(System.Reflection.Assembly)">
      <summary>
            Gets the culture name of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The culture name of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Debuggable(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating if the <see cref="T:System.Reflection.Assembly" /> was built in debug mode.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the assembly was built in debug mode; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.DelaySign(System.Reflection.Assembly)">
      <summary>
            Gets a boolean value indicating if the assembly has been built as delay-signed.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>
        <c>true</c>, if the assembly has been built as delay-signed; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Description(System.Reflection.Assembly)">
      <summary>
            Gets the description information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The description information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.GetAttributes(System.Reflection.Assembly)">
      <summary>
            Gets a name/value collection of assembly attributes exposed by the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>A NameValueCollection of assembly attributes.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.GetEmbeddedResource(System.Reflection.Assembly,System.String)">
      <summary>
            Gets the specified embedded resource from the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <param name="resourceName">The full name (including the namespace) of the embedded resource to get.</param>
      <returns>The embedded resource.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Guid(System.Reflection.Assembly)">
      <summary>
            Gets the assembly GUID that is used as an ID if the assembly is exposed to COM.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The assembly GUID that is used as an ID if the assembly is exposed to COM.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.InformationalVersion(System.Reflection.Assembly)">
      <summary>
            Gets the version information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The version information of the assembly</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.KeyFile(System.Reflection.Assembly)">
      <summary>
            Gets the name of the file containing the key pair used to generate a strong name for the attributed assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>A string containing the name of the file that contains the key pair.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Product(System.Reflection.Assembly)">
      <summary>
            Gets the product name information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The product name information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.RootNamespace(System.Reflection.Assembly)">
      <summary>
            Gets the root namespace of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The root namespace of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.SatelliteContractVersion(System.Reflection.Assembly)">
      <summary>
            Gets the assembly version used to instruct the <see cref="T:System.Resources.ResourceManager" /> to ask for
            a particular version of a satellite assembly to simplify updates of the main assembly of an application.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The satellite contract version of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.ShortName(System.Reflection.Assembly)">
      <summary>
            Returns only assembly name and version from full assembly name.
            </summary>
      <param name="instance">An <see cref="T:System.Reflection.Assembly" /> to get the short name of.</param>
      <returns>The assembly name and version from the full assembly name.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Title(System.Reflection.Assembly)">
      <summary>
            Gets the title information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The title information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.Trademark(System.Reflection.Assembly)">
      <summary>
            Gets the trademark information of the assembly.
            </summary>
      <param name="instance">Source assembly.</param>
      <returns>The trademark information of the assembly.</returns>
    </member>
    <member name="M:Gemstone.Reflection.AssemblyExtensions.AssemblyExtensions.TryLoadAllReferences(System.Reflection.Assembly)">
      <summary>
            Recursively attempts to load all assemblies referenced from the given assembly.
            </summary>
      <param name="instance">The assembly whose references are to be loaded.</param>
      <returns>
        <c>true</c> if the references were successfully loaded; <c>false</c> otherwise.</returns>
    </member>
    <member name="T:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions">
      <summary>
            Defines extensions methods related to <see cref="T:System.Reflection.MemberInfo" /> objects and derived types (e.g., <see cref="T:System.Reflection.FieldInfo" />,
            <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, etc.).
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.AttributeExists``2(``0)">
      <summary>
            Returns a boolean flag that determines if the specified <typeparamref name="TAttribute" /> exists.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <typeparam name="TAttribute">
        <see cref="T:System.Type" /> of <see cref="T:System.Attribute" /> to attempt to retrieve.</typeparam>
      <returns>
        <c>true</c> if attribute exists; otherwise, <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.GetFriendlyClassName``1(``0)">
      <summary>
            Gets the friendly class name of the provided <see cref="T:System.Reflection.MemberInfo" /> object, trimming generic parameters.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to get friendly class name.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Type" /> of <see cref="T:System.Reflection.MemberInfo" /> instance to retrieve.</typeparam>
      <returns>Friendly class name of the provided member, or <see cref="F:System.String.Empty" /> if <paramref name="member" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttribute``1(``0,System.String,System.Attribute@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeName">The name of the type of the <see cref="T:System.Attribute" /> to look for.</param>
      <param name="attribute">The <see cref="T:System.Attribute" /> that was found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attribute" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttribute``1(``0,System.Type,System.Attribute@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeType">The actual type of the <see cref="T:System.Attribute" /> to look for.</param>
      <param name="attribute">The <see cref="T:System.Attribute" /> that was found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attribute" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttribute``2(``0,``1@)">
      <summary>
            Attempts to get the specified <paramref name="attribute" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attribute">The <see cref="T:System.Attribute" /> that was found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <typeparam name="TAttribute">
        <see cref="T:System.Type" /> of <see cref="T:System.Attribute" /> to attempt to retrieve.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attribute" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttributes``1(``0,System.String,System.Attribute[]@)">
      <summary>
            Attempts to get the specified <paramref name="attributes" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeName">The name of the type of the <see cref="T:System.Attribute" /> objects to look for.</param>
      <param name="attributes">The array of <see cref="T:System.Attribute" /> objects that were found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attributes" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttributes``1(``0,System.Type,System.Attribute[]@)">
      <summary>
            Attempts to get the specified <paramref name="attributes" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributeType">The actual type of the <see cref="T:System.Attribute" /> objects to look for.</param>
      <param name="attributes">The array of <see cref="T:System.Attribute" /> objects that were found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attributes" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MemberInfoExtensions.MemberInfoExtensions.TryGetAttributes``2(``0,``1[]@)">
      <summary>
            Attempts to get the specified <paramref name="attributes" /> from a <see cref="T:System.Reflection.MemberInfo" /> object, returning <c>true</c> if it does.
            </summary>
      <param name="member">The <see cref="T:System.Reflection.MemberInfo" /> object over which to search attributes.</param>
      <param name="attributes">The array of <see cref="T:System.Attribute" /> objects that were found, if any.</param>
      <typeparam name="TMemberInfo">
        <see cref="T:System.Reflection.MemberInfo" /> or derived type to get <see cref="T:System.Attribute" /> from.</typeparam>
      <typeparam name="TAttribute">
        <see cref="T:System.Type" /> of <see cref="T:System.Attribute" /> to attempt to retrieve.</typeparam>
      <returns>
        <c>true</c> if <paramref name="attributes" /> was found; otherwise <c>false</c>.</returns>
    </member>
    <member name="T:Gemstone.Reflection.MethodBaseExtensions.MethodBaseExtensions">
      <summary>
            Defines extensions methods related to extension functions for <see cref="T:System.Reflection.MethodBase" /> instances.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.MethodBaseExtensions.MethodBaseExtensions.GetFriendlyMethodName(System.Reflection.MethodBase)">
      <summary>
            Gets the friendly method name of the provided type, trimming generic parameters.
            </summary>
      <param name="method">Type to get friendly method name for.</param>
      <returns>Friendly method name of the provided type, or <see cref="F:System.String.Empty" /> if <paramref name="method" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodBaseExtensions.MethodBaseExtensions.GetFriendlyMethodNameWithClass(System.Reflection.MethodBase)">
      <summary>
            Gets the friendly method name with class of the provided type, trimming generic parameters.
            </summary>
      <param name="method">Type to get friendly method name with class for.</param>
      <returns>Friendly method name with class of the provided type, or <see cref="F:System.String.Empty" /> if <paramref name="method" /> is <c>null</c>.</returns>
    </member>
    <member name="T:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions">
      <summary>
            Defines extensions methods related to <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction``1(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction``2(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateAction``3(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into an <see cref="T:System.Action" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the forth parameter of the method that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``1(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``2(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``3(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="M:Gemstone.Reflection.MethodInfoExtensions.MethodInfoExtensions.CreateFunc``4(System.Reflection.MethodInfo)">
      <summary>
            Turns a <see cref="T:System.Reflection.MethodInfo" /> into a <see cref="T:System.Func`1" /> that can be called with objects of the specified type. 
            </summary>
      <param name="method">the method that should be compiled.</param>
      <typeparam name="T1">The type of the second parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="T2">The type of the third parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the forth parameter of the function that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the result of the function that this delegate encapsulates.</typeparam>
      <returns>The compiled method.</returns>
    </member>
    <member name="T:Gemstone.Security.Cryptography.CharacterGroup">
      <summary>
            Defines a group of characters that can
            appear in an automatically generated password.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.CharacterGroup.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.CharacterGroup" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.CharacterGroup.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.CharacterGroup" /> class.
            </summary>
      <param name="characters">String representing the characters in the character group.</param>
    </member>
    <member name="M:Gemstone.Security.Cryptography.CharacterGroup.#ctor(System.String,System.Int32)">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.CharacterGroup" /> class.
            </summary>
      <param name="characters">String representing the characters in the character group.</param>
      <param name="minOccurrence">The minimum number of occurrences of this character group in the password.</param>
    </member>
    <member name="P:Gemstone.Security.Cryptography.CharacterGroup.Characters">
      <summary>
            The collection of characters in the character group.
            </summary>
    </member>
    <member name="P:Gemstone.Security.Cryptography.CharacterGroup.MinOccurrence">
      <summary>
            The minimum number of occurrences of any of the
            characters in this character group in the password.
            </summary>
    </member>
    <member name="T:Gemstone.Security.Cryptography.Cipher">
      <summary>
            Provides general use cryptographic functions.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Cipher.CreateAes">
      <summary>
            Creates an <see cref="T:System.Security.Cryptography.Aes" /> encryption algorithm that respects current FIPS setting.
            </summary>
      <returns>New <see cref="T:System.Security.Cryptography.Aes" /> encryption algorithm that respects current FIPS setting.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Cipher.CreateSHA1">
      <summary>
            Creates a <see cref="T:System.Security.Cryptography.SHA1" /> hashing algorithm that respects current FIPS setting.
            </summary>
      <returns>New <see cref="T:System.Security.Cryptography.SHA1" /> hashing algorithm that respects current FIPS setting.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Cipher.CreateSHA256">
      <summary>
            Creates a <see cref="T:System.Security.Cryptography.SHA256" /> hashing algorithm that respects current FIPS setting.
            </summary>
      <returns>New <see cref="T:System.Security.Cryptography.SHA256" /> hashing algorithm that respects current FIPS setting.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Cipher.CreateSHA384">
      <summary>
            Creates a <see cref="T:System.Security.Cryptography.SHA384" /> hashing algorithm that respects current FIPS setting.
            </summary>
      <returns>New <see cref="T:System.Security.Cryptography.SHA384" /> hashing algorithm that respects current FIPS setting.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Cipher.CreateSHA512">
      <summary>
            Creates a <see cref="T:System.Security.Cryptography.SHA512" /> hashing algorithm that respects current FIPS setting.
            </summary>
      <returns>New <see cref="T:System.Security.Cryptography.SHA512" /> hashing algorithm that respects current FIPS setting.</returns>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Cipher.SystemAllowsManagedEncryption">
      <summary>
            Gets a flag that determines if system will allow use of managed, i.e., non-FIPS compliant, security algorithms.
            </summary>
    </member>
    <member name="T:Gemstone.Security.Cryptography.PasswordGenerator">
      <summary>
            Generates random passwords.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.#ctor">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" /> class.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.#ctor(System.Collections.Generic.IEnumerable{Gemstone.Security.Cryptography.CharacterGroup})">
      <summary>
            Creates a new instance of the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" /> class.
            </summary>
      <param name="characterGroups">The list of character groups used to generate passwords.</param>
    </member>
    <member name="P:Gemstone.Security.Cryptography.PasswordGenerator.AllCharacters">
      <summary>
            Gets a string representing the total collection
            of characters across all character groups.
            </summary>
    </member>
    <member name="P:Gemstone.Security.Cryptography.PasswordGenerator.CharacterGroups">
      <summary>
            Gets the collection of character groups used by this <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" />.
            </summary>
    </member>
    <member name="F:Gemstone.Security.Cryptography.PasswordGenerator.Default">
      <summary>
            Defines the default password generator.
            </summary>
    </member>
    <member name="F:Gemstone.Security.Cryptography.PasswordGenerator.DefaultCharacterGroups">
      <summary>
            Default set of character groups used by the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" />.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.GeneratePassword">
      <summary>
            Generates a random password with 8 characters or
            <see cref="P:Gemstone.Security.Cryptography.PasswordGenerator.MinLength" /> if it is greater than 8 characters.
            </summary>
      <returns>A randomly generated password.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.GeneratePassword(System.Int32)">
      <summary>
            Generates a password with the given length.
            </summary>
      <param name="length">The length of the password to be generated.</param>
      <returns>A randomly generated password.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.PasswordGenerator.GeneratePassword(System.Int32,System.Int32)">
      <summary>
            Generates a password with length between the given
            <paramref name="minLength" /> and <paramref name="maxLength" />.
            </summary>
      <param name="minLength">The minimum length of the generated password.</param>
      <param name="maxLength">The maximum length of the generated password.</param>
      <returns>A randomly generated password.</returns>
    </member>
    <member name="P:Gemstone.Security.Cryptography.PasswordGenerator.MinLength">
      <summary>
            Gets the absolute minimum length of password that can be
            generated by the <see cref="T:Gemstone.Security.Cryptography.PasswordGenerator" /> based
            on the minimum occurrence of each character group.
            </summary>
    </member>
    <member name="T:Gemstone.Security.Cryptography.Random">
      <summary>
            Generates cryptographically strong random numbers.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Between(System.Double,System.Double)">
      <summary>
            Generates a semi cryptographically strong random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.Double" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Double" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Double" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />, or an exception.  </returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Boolean">
      <summary>
            Generates a cryptographically strong random boolean (i.e., a coin toss).
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Byte">
      <summary>
            Generates a cryptographically strong 8-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.ByteBetween(System.Byte,System.Byte)">
      <summary>
            Generates a cryptographically strong 8-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.Byte" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Byte" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Byte" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Decimal">
      <summary>
            Generates a semi cryptographically strong random decimal between zero and one. i.e. [0-1)
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.GetBytes(System.Byte[])">
      <summary>
            Fills an array of bytes with a cryptographically strong sequence of random values.
            </summary>
      <param name="buffer">The array to fill with a cryptographically strong sequence of random values.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
      <exception cref="T:System.ArgumentNullException">buffer is null.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Int16">
      <summary>
            Generates a cryptographically strong 16-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Int16Between(System.Int16,System.Int16)">
      <summary>
            Generates a cryptographically strong 16-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.Int16" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Int16" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Int16" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Int32">
      <summary>
            Generates a cryptographically strong 32-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Int32Between(System.Int32,System.Int32)">
      <summary>
            Generates a cryptographically strong 32-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.Int32" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Int32" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Int32" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Int64">
      <summary>
            Generates a cryptographically strong 64-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.Int64Between(System.Int64,System.Int64)">
      <summary>
            Generates a cryptographically strong 64-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.Int64" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.Int64" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.Int64" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.Number">
      <summary>
            Generates a semi cryptographically strong double-precision floating-point random number between zero and one. i.e. [0-1)
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.UInt16">
      <summary>
            Generates a cryptographically strong unsigned 16-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.UInt16Between(System.UInt16,System.UInt16)">
      <summary>
            Generates a cryptographically strong unsigned 16-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.UInt16" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.UInt16" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.UInt16" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.UInt32">
      <summary>
            Generates a cryptographically strong unsigned 32-bit random integer. 
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.UInt32Between(System.UInt32,System.UInt32)">
      <summary>
            Generates a cryptographically strong unsigned 32-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.UInt32" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.UInt32" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.UInt32" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="P:Gemstone.Security.Cryptography.Random.UInt64">
      <summary>
            Generates a cryptographically strong unsigned 64-bit random integer.
            </summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="M:Gemstone.Security.Cryptography.Random.UInt64Between(System.UInt64,System.UInt64)">
      <summary>
            Generates a cryptographically strong unsigned 64-bit random integer between specified values. i.e. [<paramref name="startNumber" />-<paramref name="stopNumber" />)
            </summary>
      <param name="startNumber">A <see cref="T:System.UInt64" /> that is the low end of our range.</param>
      <param name="stopNumber">A <see cref="T:System.UInt64" /> that is the high end of our range.</param>
      <returns>A <see cref="T:System.UInt64" /> that is generated between the <paramref name="startNumber" /> and the <paramref name="stopNumber" />.</returns>
      <exception cref="T:System.Security.Cryptography.CryptographicException">The cryptographic service provider (CSP) cannot be acquired.</exception>
    </member>
    <member name="T:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions">
      <summary>
            Defines extension functions related to cryptographic <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> objects.
            </summary>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Returns a binary array of decrypted data for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for decryption.</param>
      <param name="data">Source buffer containing data to decrypt.</param>
      <param name="startIndex">Offset into <paramref name="data" /> buffer.</param>
      <param name="length">Number of bytes in <paramref name="data" /> buffer to decrypt starting from <paramref name="startIndex" /> offset.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <returns>Decrypted version of <paramref name="data" /> buffer.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Decrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
      <summary>
            Decrypts input stream onto output stream for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for decryption.</param>
      <param name="source">Source stream that contains data to decrypt.</param>
      <param name="destination">Destination stream used to hold decrypted data.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Byte[])">
      <summary>
            Returns a binary array of encrypted data for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for encryption.</param>
      <param name="data">Source buffer containing data to encrypt.</param>
      <param name="startIndex">Offset into <paramref name="data" /> buffer.</param>
      <param name="length">Number of bytes in <paramref name="data" /> buffer to encrypt starting from <paramref name="startIndex" /> offset.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
      <returns>Encrypted version of <paramref name="data" /> buffer.</returns>
    </member>
    <member name="M:Gemstone.Security.Cryptography.SymmetricAlgorithmExtensions.SymmetricAlgorithmExtensions.Encrypt(System.Security.Cryptography.SymmetricAlgorithm,System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[])">
      <summary>
            Encrypts input stream onto output stream for the given parameters.
            </summary>
      <param name="algorithm">
        <see cref="T:System.Security.Cryptography.SymmetricAlgorithm" /> to use for encryption.</param>
      <param name="source">Source stream that contains data to encrypt.</param>
      <param name="destination">Destination stream used to hold encrypted data.</param>
      <param name="key">The secret key to use for the symmetric algorithm.</param>
      <param name="iv">The initialization vector to use for the symmetric algorithm.</param>
    </member>
    <member name="T:Gemstone.StreamExtensions.StreamExtensions">
      <summary>
            Defines extension functions related to <see cref="T:System.IO.Stream" /> manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream,System.Int64,System.Byte[])">
      <summary>
            Writes the contents of a stream to the provided stream.
            </summary>
      <param name="destination">the destination stream.</param>
      <param name="source">the source stream</param>
      <param name="length">the number of bytes to copy. If the source is not long enough,
            and end of stream exception will be thrown.</param>
      <param name="buffer">A buffer to use to copy the data from one stream to another. 
            This keeps the function from always allocating a new buffer for the copy</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Read7BitUInt32(System.IO.Stream)">
      <summary>
            Reads the 7-bit encoded value from the stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadAll(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
      <summary>
            Reads all of the provided bytes. Will not return prematurely, 
            but continue to execute a <see cref="M:System.IO.Stream.Read(System.Byte[],System.Int32,System.Int32)" /> command until the entire
            <paramref name="length" /> has been read.
            </summary>
      <param name="stream">The stream to read from</param>
      <param name="buffer">The buffer to write to</param>
      <param name="position">the start position in the <paramref name="buffer" /></param>
      <param name="length">the number of bytes to read</param>
      <exception cref="T:System.IO.EndOfStreamException">occurs if the end of the stream has been reached.</exception>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadBoolean(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadBytes(System.IO.Stream)">
      <summary>
            Reads a byte array from a <see cref="T:System.IO.Stream" />. 
            The number of bytes should be prefixed in the stream.
            </summary>
      <param name="stream">the stream to read from</param>
      <returns>A new array containing the bytes.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadBytes(System.IO.Stream,System.Int32)">
      <summary>
            Reads a byte array from a <see cref="T:System.IO.Stream" />. 
            The number of bytes should be prefixed in the stream.
            </summary>
      <param name="stream">the stream to read from</param>
      <param name="length">gets the number of bytes to read.</param>
      <returns>A new array containing the bytes.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadChar(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadDateTime(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadDecimal(System.IO.Stream)">
      <summary>
            Reads a decimal from the stream in Little Endian bytes.
            </summary>
      <param name="stream">the stream to read the decimal from.</param>
      <returns>the decimal value</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadDouble(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadGuid(System.IO.Stream)">
      <summary>
            Reads a Guid from the stream in Little Endian bytes.
            </summary>
      <param name="stream">the stream to read the guid from.</param>
      <returns>the guid value</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadInt16(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadInt32(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadInt32Collection(System.IO.Stream)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Integers read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadInt64(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadNextByte(System.IO.Stream)">
      <summary>
            Read a byte from the stream. 
            Will throw an exception if the end of the stream has been reached.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadNullableString(System.IO.Stream)">
      <summary>
            Reads a string from a <see cref="T:System.IO.Stream" /> that was encoded in UTF8. 
            Value can be null and is prefixed with a boolean.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadObject(System.IO.Stream)">
      <summary>
            Reads an object from a stream.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Decoded object.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadSByte(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadSingle(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadStream(System.IO.Stream)">
      <summary>
            Reads entire <see cref="T:System.IO.Stream" /> contents, and returns <see cref="T:System.Byte" /> array of data.
            </summary>
      <param name="source">The <see cref="T:System.IO.Stream" /> to be converted to <see cref="T:System.Byte" /> array.</param>
      <returns>An array of <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadString(System.IO.Stream)">
      <summary>
            Reads a string from a <see cref="T:System.IO.Stream" /> that was encoded in UTF8.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadStringCollection(System.IO.Stream)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <returns>Strings read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadUInt16(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadUInt32(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.ReadUInt64(System.IO.Stream)">
      <summary>
            Reads the value from the stream in little endian format.
            </summary>
      <param name="stream">the stream to read from.</param>
      <returns>Value read.</returns>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Boolean)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Byte)">
      <summary>
            Writes the supplied <paramref name="value" /> to
            <pararef name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
      <summary>
            Writes the entire buffer to the <paramref name="stream" /></summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Char)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.DateTime)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Decimal)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Double)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Guid)">
      <summary>
            Writes a guid in little endian bytes to the stream
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Int16)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Int32)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Int64)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.SByte)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.Single)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.String)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> in UTF8 encoding.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.UInt16)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.UInt32)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.Write(System.IO.Stream,System.UInt64)">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> in little endian format.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.WriteCollection(System.IO.Stream,System.Collections.Generic.ICollection{System.Int32})">
      <summary>
            Writes the supplied Collection to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="collection">Collection to write.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.WriteCollection(System.IO.Stream,System.Collections.Generic.ICollection{System.String})">
      <summary>
            Writes the supplied Collection to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">Source stream.</param>
      <param name="collection">Collection to write.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.WriteNullable(System.IO.Stream,System.String)">
      <summary>
            Writes the supplied string to a <see cref="T:System.IO.Stream" /> 
            in UTF8 encoding with a prefix if the value is null
            </summary>
      <param name="stream">Source stream.</param>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.WriteObject(System.IO.Stream,System.Object)">
      <summary>
            Encodes an object on a stream.
            </summary>
      <param name="stream">Destination stream.</param>
      <param name="value">Object to encode.</param>
    </member>
    <member name="M:Gemstone.StreamExtensions.StreamExtensions.WriteWithLength(System.IO.Stream,System.Byte[])">
      <summary>
            Writes the supplied <paramref name="value" /> to 
            <paramref name="stream" /> along with prefixing the length 
            so it can be properly read as a unit.
            </summary>
      <param name="stream">the stream to write to</param>
      <param name="value">the value to write</param>
    </member>
    <member name="T:Gemstone.StringExtensions.StringExtensions">
      <summary>
            Defines extension functions related to string manipulation.
            </summary>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Base64Decode(System.String)">
      <summary>
            Decodes a given base-64 encoded string encoded with <see cref="M:Gemstone.StringExtensions.StringExtensions.Base64Encode(System.String)" />.
            </summary>
      <param name="value">Input string.</param>
      <returns>A <see cref="T:System.String"></see> value representing the decoded input of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Base64Encode(System.String)">
      <summary>
            Encodes a string into a base-64 string.
            </summary>
      <param name="value">Input string.</param>
      <returns>A <see cref="T:System.String"></see> value representing the encoded input of <paramref name="value" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.CenterText(System.String,System.Int32)">
      <summary>
            Centers text within the specified maximum length, biased to the left.
            Text will be padded to the left and right with spaces.
            If value is greater than specified maximum length, value returned will be truncated from the right.
            </summary>
      <param name="value">A <see cref="T:System.String" /> to be centered.</param>
      <param name="maxLength">An <see cref="T:System.Int32" /> that is the maximum length of padding.</param>
      <returns>The centered string value.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.CenterText(System.String,System.Int32,System.Char)">
      <summary>
            Centers text within the specified maximum length, biased to the left.
            Text will be padded to the left and right with specified padding character.
            If value is greater than specified maximum length, value returned will be truncated from the right.
            </summary>
      <param name="value">A <see cref="T:System.String" /> to be centered.</param>
      <param name="maxLength">An <see cref="T:System.Int32" /> that is the maximum length of padding.</param>
      <param name="paddingCharacter">The <see cref="T:System.Char" /> value to pad with.</param>
      <returns>The centered string value.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.CharCount(System.String,System.Char)">
      <summary>
            Counts the total number of the occurrences of a character in the given string.
            </summary>
      <param name="value">Input string.</param>
      <param name="characterToCount">Character to be counted.</param>
      <returns>Total number of the occurrences of <paramref name="characterToCount" /> in the given string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> to convert string to.</typeparam>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type T if conversion fails.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType``1(System.String,System.Globalization.CultureInfo)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> to convert string to.</typeparam>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type T if conversion fails.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType(System.String,System.Type)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type if conversion fails.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ConvertToType(System.String,System.Type,System.Globalization.CultureInfo)">
      <summary>
            Converts this string into the specified type.
            </summary>
      <param name="value">Source string to convert to type.</param>
      <param name="type">
        <see cref="T:System.Type" /> to convert string to.</param>
      <param name="culture">
        <see cref="T:System.Globalization.CultureInfo" /> to use for the conversion.</param>
      <returns>
        <see cref="T:System.String" /> converted to specified <see cref="T:System.Type" />; default value of specified type if conversion fails.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureEnd(System.String,System.Char)">
      <summary>
            Ensures a string ends with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="endChar">The character desired at string's end.</param>
      <returns>The sent string with character at the end.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureEnd(System.String,System.Char,System.Boolean)">
      <summary>
            Ensures a string ends with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="endChar">The character desired at string's end.</param>
      <param name="removeRepeatingChar">Set to <c>true</c> to ensure one and only one instance of <paramref name="endChar" />.</param>
      <returns>The sent string with character at the end.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureEnd(System.String,System.String)">
      <summary>
            Ensures a string ends with a specific string.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="endString">The string desired at string's end.</param>
      <returns>The sent string with string at the end.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureStart(System.String,System.Char)">
      <summary>
            Ensures a string starts with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="startChar">The character desired at string start.</param>
      <returns>The sent string with character at the start.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureStart(System.String,System.Char,System.Boolean)">
      <summary>
            Ensures a string starts with a specific character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="startChar">The character desired at string start.</param>
      <param name="removeRepeatingChar">Set to <c>true</c> to ensure one and only one instance of <paramref name="startChar" />.</param>
      <returns>The sent string with character at the start.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.EnsureStart(System.String,System.String)">
      <summary>
            Ensures a string starts with a specific string.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="startString">The string desired at string start.</param>
      <returns>The sent string with string at the start.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.GetComparer(System.StringComparison)">
      <summary>
            Gets appropriate <see cref="T:System.StringComparer" /> for the specified <see cref="T:System.StringComparison" />.
            </summary>
      <param name="comparison">
        <see cref="T:System.StringComparison" /> type.</param>
      <returns>
        <see cref="T:System.StringComparer" /> for the specified <see cref="T:System.StringComparison" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.GetSegments(System.String,System.Int32)">
      <summary>
            Turns source string into an array of string segments - each with a set maximum width - for parsing or displaying.
            </summary>
      <param name="value">Input string to break up into segments.</param>
      <param name="segmentSize">Maximum size of returned segment.</param>
      <returns>Array of string segments as parsed from source string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfNot(System.String,System.Char,System.Int32)">
      <summary>
            Finds the first index that does not match the given <paramref name="character" />.
            </summary>
      <param name="value">String to process</param>
      <param name="character">the character use to test</param>
      <param name="startIndex">the index at which to begin testing <paramref name="value" /></param>
      <returns>The first index of a character that does NOT match <paramref name="character" />. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfNot(System.String,System.Char[],System.Int32)">
      <summary>
            Finds the first index that is NOT included in testChars
            </summary>
      <param name="value">String to process</param>
      <param name="anyOf">the characters use to test</param>
      <param name="startIndex">the index at which to begin testing <paramref name="value" /></param>
      <returns>The first index of a character NOT included in <paramref name="anyOf" />. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfNot(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
      <summary>
            Finds the first index that does NOT pass the <paramref name="characterTestFunction" /> delegate function.
            </summary>
      <param name="value">String to process</param>
      <param name="characterTestFunction">the character test to use</param>
      <param name="startIndex">the index at which to begin testing <paramref name="value" /></param>
      <returns>The first index of a character that does NOT pass the <paramref name="characterTestFunction" />. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPrevious(System.String,System.Char,System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a specified character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testChar">The char to find.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for <paramref name="testChar" />. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of <paramref name="testChar" /> within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPrevious(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character passing the specified delegate.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="characterTestFunction">The delegate function used to match characters.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin executing test function. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the matching character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPrevious(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Searches a string from right to left for the next instance of a specified string.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testString">The string to find.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for <paramref name="testString" />. Typically length of <paramref name="value" /> minus 1."</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>The start (or left most) index of <paramref name="testString" /> within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPreviousNot(System.String,System.Char,System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character that is not the specified character.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testChar">The char to ignore.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for a character that is not <paramref name="testChar" />. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPreviousNot(System.String,System.Char[],System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character that is not contained in the specified collection of characters.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="anyOf">The characters to use to test find.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin looking for characters not in <paramref name="anyOf" />. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfPreviousNot(System.String,System.Func{System.Char,System.Boolean},System.Int32)">
      <summary>
            Searches a string from right to left for the next instance of a character that does not pass the given delegate function.
            </summary>
      <param name="value">Input string to process.</param>
      <param name="characterTestFunction">The character test to use.</param>
      <param name="startIndex">The index in <paramref name="value" /> from which to begin testing characters. Typically length of <paramref name="value" /> minus 1."</param>
      <returns>The index of the character within <paramref name="value" /> or (-1) if not found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String)">
      <summary>
            Searches a string for an instance of a repeated character.
            </summary>
      <param name="value">The string to process.</param>
      <returns>The index of the first instance of any character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String,System.Char)">
      <summary>
            Searches a string for a repeated instance of the specified <paramref name="characterToFind" />.
            </summary>
      <param name="value">The string to process.</param>
      <param name="characterToFind">The character of interest.</param>
      <returns>The index of the first instance of the character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String,System.Char,System.Int32)">
      <summary>
            Searches a string for a repeated instance of the specified <paramref name="characterToFind" /> from specified <paramref name="startIndex" />.
            </summary>
      <param name="value">The string to process.</param>
      <param name="characterToFind">The character of interest.</param>
      <param name="startIndex">The index from which to begin the search.</param>
      <returns>The index of the first instance of the character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IndexOfRepeatedChar(System.String,System.Int32)">
      <summary>
            Searches a string for an instance of a repeated character from specified <paramref name="startIndex" />.
            </summary>
      <param name="value">The string to process.</param>
      <param name="startIndex">The index from which to begin the search.</param>
      <returns>The index of the first instance of any character that is repeated or (-1) if no repeated chars found.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllDigits(System.String)">
      <summary>
            Tests to see if a string is contains only digits based on Char.IsDigit function.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are digits; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLetters(System.String)">
      <summary>
            Tests to see if a string contains only letters.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are letters; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLetters(System.String,System.Boolean)">
      <summary>
            Tests to see if a string contains only letters.
            </summary>
      <param name="value">Input string.</param>
      <param name="ignorePunctuation">Set to True to ignore punctuation.</param>
      <returns>True, if all string's characters are letters; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLettersOrDigits(System.String)">
      <summary>
            Tests to see if a string contains only letters or digits.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are either letters or digits; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLettersOrDigits(System.String,System.Boolean)">
      <summary>
            Tests to see if a string contains only letters or digits.
            </summary>
      <param name="value">Input string.</param>
      <param name="ignorePunctuation">Set to True to ignore punctuation.</param>
      <returns>True, if all string's characters are letters or digits; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllLower(System.String)">
      <summary>
            Tests to see if a string's letters are all lower case.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's letter characters are lower case; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllNumbers(System.String)">
      <summary>
            Tests to see if a string contains only numbers based on Char.IsNumber function.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's characters are numbers; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.IsAllUpper(System.String)">
      <summary>
            Tests to see if a string's letters are all upper case.
            </summary>
      <param name="value">Input string.</param>
      <returns>True, if all string's letter characters are upper case; otherwise, false.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.JoinKeyValuePairs(System.Collections.Generic.IDictionary{System.String,System.String},System.Char,System.Char,System.Char,System.Char)">
      <summary>
            Combines a dictionary of key-value pairs in to a string.
            </summary>
      <param name="pairs">Dictionary of key-value pairs.</param>
      <param name="parameterDelimiter">Character that delimits one key-value pair from another (e.g. ';').</param>
      <param name="keyValueDelimiter">Character that delimits a key from its value (e.g. '=').</param>
      <param name="startValueDelimiter">Optional character that marks the start of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters (e.g., "{").</param>
      <param name="endValueDelimiter">Optional character that marks the end of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters (e.g., "}").</param>
      <returns>A string of key-value pairs.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.NotEmpty(System.String)">
      <summary>
            Ensures parameter is not an empty or null string. Returns a single space if test value is empty.
            </summary>
      <param name="testValue">Value to test for null or empty.</param>
      <returns>A non-empty string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.NotEmpty(System.String,System.String)">
      <summary>
            Ensures parameter is not an empty or null string.
            </summary>
      <param name="testValue">Value to test for null or empty.</param>
      <param name="nonEmptyReturnValue">Value to return if <paramref name="testValue">testValue</paramref> is null or empty.</param>
      <returns>A non-empty string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ParseBoolean(System.String)">
      <summary>
            Parses a string intended to represent a boolean value.
            </summary>
      <param name="value">String representing a boolean value.</param>
      <returns>Parsed boolean value.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ParseKeyValuePairs(System.String,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
      <summary>
            Parses key/value pair expressions from a string. Parameter pairs are delimited by <paramref name="keyValueDelimiter" />
            and multiple pairs separated by <paramref name="parameterDelimiter" />. Supports encapsulated nested expressions.
            </summary>
      <param name="value">String containing key/value pair expressions to parse.</param>
      <param name="parameterDelimiter">Character that delimits one key/value pair from another.</param>
      <param name="keyValueDelimiter">Character that delimits key from value.</param>
      <param name="startValueDelimiter">Optional character that marks the start of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters.</param>
      <param name="endValueDelimiter">Optional character that marks the end of a value such that value could contain other
            <paramref name="parameterDelimiter" /> or <paramref name="keyValueDelimiter" /> characters.</param>
      <param name="ignoreDuplicateKeys">Flag determines whether duplicates are ignored. If flag is set to <c>false</c> an
            <see cref="T:System.ArgumentException" /> will be thrown when all key parameters are not unique.</param>
      <returns>Dictionary of key/value pairs.</returns>
      <exception cref="T:System.ArgumentNullException">value is null.</exception>
      <exception cref="T:System.ArgumentException">All delimiters must be unique -or- all keys must be unique when
            <paramref name="ignoreDuplicateKeys" /> is set to <c>false</c>.</exception>
      <exception cref="T:System.FormatException">Total nested key/value pair expressions are mismatched -or- encountered
            <paramref name="endValueDelimiter" /> before <paramref name="startValueDelimiter" />.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.QuoteUnwrap(System.String,System.Char)">
      <summary>
            Unwraps quotes similar to Excel.  However, a little more predictable for unusual edge cases.
            </summary>
      <param name="value">The string to process</param>
      <param name="quoteChar">The quote char to use.  Default is double quote. Due to trimming, quoteChar of whitespace is not allowed.</param>
      <returns>The sent string with matched surrounding quotes removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.QuoteUnwrap(System.String,System.Char[])">
      <summary>
            Unwraps quotes similar to Excel.  However, a little more predictable for unusual edge cases.
            </summary>
      <param name="value">The string to process</param>
      <param name="quoteChars">The collection of quote chars to use. Due to trimming, whitespace is not allowed.</param>
      <returns>The sent string with matched surrounding quote chars removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.QuoteWrap(System.String,System.Char)">
      <summary>
            Wraps <paramref name="value" /> in the <paramref name="quoteChar" />.
            </summary>
      <param name="value">Input string to process</param>
      <param name="quoteChar">The char to wrap <paramref name="value" /></param>
      <returns>
        <paramref name="value" /> wrapped in <paramref name="quoteChar" /></returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RegexDecode(System.String)">
      <summary>
            Decodes the specified Regular Expression character back into a standard Unicode character.
            </summary>
      <param name="value">Regular Expression character to decode back into a Unicode character.</param>
      <returns>Standard Unicode character representation of specified Regular Expression character.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveCharacter(System.String,System.Char)">
      <summary>
            Removes all characters matching the given <paramref name="characterToRemove" />.
            </summary>
      <param name="value">Input string.</param>
      <param name="characterToRemove">The specific character to remove.</param>
      <returns>Returns <paramref name="value" /> with all characters matching the given character removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveCharacters(System.String,System.Func{System.Char,System.Boolean})">
      <summary>
            Removes all characters passing delegate test from a string.
            </summary>
      <param name="value">Input string.</param>
      <param name="characterTestFunction">Delegate used to determine whether or not character should be removed.</param>
      <returns>Returns <paramref name="value" /> with all characters passing delegate test removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveControlCharacters(System.String)">
      <summary>
            Removes all control characters from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all control characters removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveCrLfs(System.String)">
      <summary>
            Removes all carriage returns and line feeds from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all CR and LF characters removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveDuplicates(System.String,System.String)">
      <summary>
            Removes duplicate character strings (adjoining replication) in a string.
            </summary>
      <param name="value">Input string.</param>
      <param name="duplicatedValue">String whose duplicates are to be removed.</param>
      <returns>Returns <paramref name="value" /> with all duplicated <paramref name="duplicatedValue" /> removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveDuplicateWhiteSpace(System.String)">
      <summary>
            Replaces all repeating white space with a single space.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all duplicate white space removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveDuplicateWhiteSpace(System.String,System.Char)">
      <summary>
            Replaces all repeating white space with specified spacing character.
            </summary>
      <param name="value">Input string.</param>
      <param name="spacingCharacter">Character value to use to insert as single white space value.</param>
      <returns>Returns <paramref name="value" /> with all duplicate white space removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveInvalidFileNameCharacters(System.String)">
      <summary>
            Removes all invalid file name characters (\ / : * ? " &lt; &gt; |) from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all invalid file name characters removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveLeadingString(System.String,System.Char,System.Boolean)">
      <summary>
            Removes one or more instances of a specified char from the beginning of a string.
            </summary>
      <param name="value">The string to process</param>
      <param name="charToRemove">The char to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="charToRemove" /> deleted from the beginning</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveLeadingString(System.String,System.String,System.Boolean)">
      <summary>
            Removes one or more instances of a specified string from the beginning of a string.
            </summary>
      <param name="value">The string to process</param>
      <param name="stringToRemove">The string to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="stringToRemove" /> deleted from the beginning</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveLeadingZeros(System.String,System.Boolean)">
      <summary>
            Assures that numeric value is a well formed number
            Adds a leading zero in front of a decimal, if present
            </summary>
      <param name="value">The string to process</param>
      <param name="AssureParseDouble">Set to TRUE to assure that value parses to Double</param>
      <returns>A string with deleted from the beginning</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveNull(System.String)">
      <summary>
            Removes the terminator ('\0') from a null terminated string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all characters to the left of the terminator.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveTrailingString(System.String,System.Char,System.Boolean)">
      <summary>
            Removes one or more instances of a character from the end of a string
            </summary>
      <param name="value">The string to process</param>
      <param name="charToRemove">The char to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="charToRemove" /> deleted from the end</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveTrailingString(System.String,System.String,System.Boolean)">
      <summary>
            Removes one or more instances of a string from the end of a string
            </summary>
      <param name="value">The string to process</param>
      <param name="stringToRemove">The string to remove</param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>A string with <paramref name="stringToRemove" /> deleted from the end</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.RemoveWhiteSpace(System.String)">
      <summary>
            Removes all white space (as defined by IsWhiteSpace) from a string.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all white space removed.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceCaseInsensitive(System.String,System.String,System.String)">
      <summary>
            Performs a case insensitive string replacement.
            </summary>
      <param name="value">The string to examine.</param>
      <param name="fromText">The value to replace.</param>
      <param name="toText">The new value to be inserted</param>
      <returns>A string with replacements.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceCharacters(System.String,System.Char,System.Func{System.Char,System.Boolean})">
      <summary>
            Replaces all characters passing delegate test with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to replace characters passing delegate test.</param>
      <param name="characterTestFunction">Delegate used to determine whether or not character should be replaced.</param>
      <returns>Returns <paramref name="value" /> with all characters passing delegate test replaced.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceControlCharacters(System.String)">
      <summary>
            Replaces all control characters in a string with a single space.
            </summary>
      <param name="value">Input string.</param>
      <returns>Returns <paramref name="value" /> with all control characters replaced as a single space.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceControlCharacters(System.String,System.Char)">
      <summary>
            Replaces all control characters in a string with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to "replace" control characters.</param>
      <returns>Returns <paramref name="value" /> with all control characters replaced.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceCrLfs(System.String,System.Char)">
      <summary>
            Replaces all carriage return and line feed characters (as well as CR/LF sequences) in a string with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to "replace" CR and LF characters.</param>
      <returns>Returns <paramref name="value" /> with all CR and LF characters replaced.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceInvalidFileNameCharacters(System.String,System.Char)">
      <summary>
            Replaces all invalid file name characters (\ / : * ? " &lt; &gt; |) in a string with the specified <paramref name="replacementCharacter" />.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to replace the invalid characters.</param>
      <returns>&gt;Returns <paramref name="value" /> with all invalid file name characters replaced.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ReplaceWhiteSpace(System.String,System.Char)">
      <summary>
            Replaces all white space characters (as defined by IsWhiteSpace) with specified replacement character.
            </summary>
      <param name="value">Input string.</param>
      <param name="replacementCharacter">Character used to "replace" white space characters.</param>
      <returns>Returns <paramref name="value" /> with all white space characters replaced.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.Reverse(System.String)">
      <summary>
            Reverses the order of the characters in a string.
            </summary>
      <param name="value">Input string to process.</param>
      <returns>The reversed string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.StringCount(System.String,System.String,System.Int32,System.Boolean)">
      <summary>
            Counts the total number of the occurrences of string within a string
            </summary>
      <param name="value">Input string to process.</param>
      <param name="testString">String to be counted.</param>
      <param name="startIndex">The index at which to begin <paramref name="value" /></param>
      <param name="matchCase">Set to <c>false</c> for case insensitive search</param>
      <returns>Total number of the occurrences of <paramref name="testString" /> in the given string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.SubstringEnd(System.String,System.Int32)">
      <summary>
            Returns a string consisting of a specified number of characters from the end of a string "to the left"
            </summary>
      <param name="value">The string to process</param>
      <param name="length">The number of characters from the end of the string to return</param>
      <returns>A string of length <paramref name="length" /></returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.SubstringPrevious(System.String,System.Int32,System.Int32)">
      <summary>
            Returns a string consisting of a specified number of characters to the left (previous chars) from the provided startIndex
            </summary>
      <param name="value">The string to process</param>
      <param name="endIndex">The index in <paramref name="value" /> at the end of the desired returned string.</param>
      <param name="length">The number of characters from the <paramref name="endIndex" /> of the string to return</param>
      <returns>A string to the left of <paramref name="endIndex" /> of length up to <paramref name="length" /></returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToCamelCase(System.String)">
      <summary>
            Converts first letter of string to lower-case.
            </summary>
      <param name="value">String to convert to camel case.</param>
      <returns>
        <paramref name="value" /> with first letter as lower-case.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullNorEmptyString``1(``0,System.String)">
      <summary>
            Converts value to string; null objects, DBNull objects or empty strings will return specified <paramref name="nonNullNorEmptyValue" />.
            </summary>
      <param name="value">Value to convert to string.</param>
      <param name="nonNullNorEmptyValue">
        <see cref="T:System.String" /> to return if <paramref name="value" /> is null.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, DBNull or an empty string <paramref name="nonNullNorEmptyValue" /> will be returned.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="nonNullNorEmptyValue" /> must not be null or an empty string.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullNorWhiteSpace``1(``0,System.String)">
      <summary>
            Converts value to string; null objects, DBNull objects, empty strings or all white space strings will return specified <paramref name="nonNullNorWhiteSpaceValue" />.
            </summary>
      <param name="value">Value to convert to string.</param>
      <param name="nonNullNorWhiteSpaceValue">
        <see cref="T:System.String" /> to return if <paramref name="value" /> is null.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, DBNull, empty or all white space, <paramref name="nonNullNorWhiteSpaceValue" /> will be returned.</returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="nonNullNorWhiteSpaceValue" /> must not be null, an empty string or white space.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullString(System.String)">
      <summary>
            Makes sure returned string value is not null; if this string is null, empty string ("") will be returned. 
            </summary>
      <param name="value">
        <see cref="T:System.String" /> to verify is not null.</param>
      <returns>
        <see cref="T:System.String" /> value; if <paramref name="value" /> is null, empty string ("") will be returned.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullString``1(``0)">
      <summary>
            Converts value to string; null objects (or DBNull objects) will return an empty string (""). 
            </summary>
      <param name="value">Value to convert to string.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, empty string ("") will be returned. </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToNonNullString``1(``0,System.String)">
      <summary>
            Converts value to string; null objects (or DBNull objects) will return specified <paramref name="nonNullValue" />.
            </summary>
      <param name="value">Value to convert to string.</param>
      <param name="nonNullValue">
        <see cref="T:System.String" /> to return if <paramref name="value" /> is null.</param>
      <typeparam name="T">
        <see cref="T:System.Type" /> of <see cref="T:System.Object" /> to convert to string.</typeparam>
      <returns>
        <paramref name="value" /> as a string; if <paramref name="value" /> is null, <paramref name="nonNullValue" /> will be returned.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonNullValue" /> cannot be null.</exception>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToPascalCase(System.String)">
      <summary>
            Converts first letter of string to upper-case.
            </summary>
      <param name="value">String to convert to pascal case.</param>
      <returns>
        <paramref name="value" /> with first letter as upper-case.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToSecureString(System.String)">
      <summary>
            Converts the given string into a <see cref="T:System.Security.SecureString" />.
            </summary>
      <param name="value">The string to be converted.</param>
      <returns>The given string as a <see cref="T:System.Security.SecureString" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToStream(System.String,System.Text.Encoding)">
      <summary>
            Converts string into a stream using the specified <paramref name="encoding" />.
            </summary>
      <param name="value">Input to string to convert to a string.</param>
      <param name="encoding">String encoding to use; defaults to <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <returns>String <paramref name="value" /> encoded onto a stream.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToStreamAsync(System.String,System.Text.Encoding)">
      <summary>
            Asynchronously converts string into a stream using the specified <paramref name="encoding" />.
            </summary>
      <param name="value">Input to string to convert to a string.</param>
      <param name="encoding">String encoding to use; defaults to <see cref="P:System.Text.Encoding.UTF8" />.</param>
      <returns>String <paramref name="value" /> encoded onto a stream.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
      <summary>
            Converts the provided string into title case (upper case first letter of each word).
            </summary>
      <param name="value">Input string.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> that corresponds to the language rules applied for title casing of words; defaults to <see cref="P:System.Globalization.CultureInfo.CurrentCulture" />.</param>
      <returns>A <see cref="T:System.String" /> that has the first letter of each word capitalized.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.ToUnsecureString(System.Security.SecureString)">
      <summary>
            Converts the given <see cref="T:System.Security.SecureString" /> into a <see cref="T:System.String" />.
            </summary>
      <param name="value">The <see cref="T:System.Security.SecureString" /> to be converted.</param>
      <returns>The given <see cref="T:System.Security.SecureString" /> as a <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TrimWithEllipsisEnd(System.String,System.Int32)">
      <summary>
            Places an ellipsis at the end of a string as it is trimmed to length specified.
            </summary>
      <param name="value">The string to process.</param>
      <param name="length">The maximum returned string length; minimum value is 5.</param>
      <returns>
            A trimmed string of the specified <paramref name="length" /> or empty string if <paramref name="value" /> is null or empty.
            </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TrimWithEllipsisMiddle(System.String,System.Int32)">
      <summary>
            Places an ellipsis in the middle of a string as it is trimmed to length specified.
            </summary>
      <param name="value">The string to process.</param>
      <param name="length">The maximum returned string length; minimum value is 5.</param>
      <returns>
            A trimmed string of the specified <paramref name="length" /> or empty string if <paramref name="value" /> is null or empty.
            </returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TruncateLeft(System.String,System.Int32)">
      <summary>
            Truncates the provided string from the left if it is longer that specified length.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value that is to be truncated.</param>
      <param name="maxLength">The maximum number of characters that <paramref name="value" /> can be.</param>
      <returns>A <see cref="T:System.String" /> that is the truncated version of the <paramref name="value" /> string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.TruncateRight(System.String,System.Int32)">
      <summary>
            Truncates the provided string from the right if it is longer that specified length.
            </summary>
      <param name="value">A <see cref="T:System.String" /> value that is to be truncated.</param>
      <param name="maxLength">The maximum number of characters that <paramref name="value" /> can be.</param>
      <returns>A <see cref="T:System.String" /> that is the truncated version of the <paramref name="value" /> string.</returns>
    </member>
    <member name="M:Gemstone.StringExtensions.StringExtensions.UriEncode(System.String)">
      <summary>
            Escapes string using URL encoding.
            </summary>
      <param name="value">The string to escape.</param>
      <returns>URL encoded string.</returns>
    </member>
    <member name="T:Gemstone.TypeExtensions.TypeExtensions">
      <summary>
            Extensions to all <see cref="T:System.Type" /> objects.
            </summary>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.GetFriendlyClassName(System.Type)">
      <summary>
            Gets the friendly class name of the provided type, trimming generic parameters.
            </summary>
      <param name="type">Type to get friendly class name for.</param>
      <returns>Friendly class name of the provided type, or <see cref="F:System.String.Empty" /> if <paramref name="type" /> is <c>null</c>.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.GetRootType(System.Type)">
      <summary>
            Gets the root type in the inheritance hierarchy from which the specified <paramref name="type" /> inherits.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> whose root type is to be found.</param>
      <returns>The root type in the inheritance hierarchy from which the specified <paramref name="type" /> inherits.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.IsNumeric(System.Type)">
      <summary>
            Determines if the specified type is a native structure that represents a numeric value.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> being tested.</param>
      <returns>
        <c>true</c> if the specified type is a native structure that represents a numeric value.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type)">
      <summary>
            Loads public types from assemblies in the application binaries directory that implement the specified 
            <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type,System.Boolean)">
      <summary>
            Loads public types from assemblies in the application binaries directory that implement the specified 
            <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <param name="excludeAbstractTypes">true to exclude public types that are abstract; otherwise false.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type,System.String)">
      <summary>
            Loads public types from assemblies in the specified <paramref name="binariesDirectory" /> that implement 
            the specified <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <param name="binariesDirectory">The directory containing the assemblies to be processed.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="M:Gemstone.TypeExtensions.TypeExtensions.LoadImplementations(System.Type,System.String,System.Boolean,System.Boolean)">
      <summary>
            Loads public types from assemblies in the specified <paramref name="binariesDirectory" /> that implement 
            the specified <paramref name="type" /> either through class inheritance or interface implementation.
            </summary>
      <param name="type">The <see cref="T:System.Type" /> that must be implemented by the public types.</param>
      <param name="binariesDirectory">The directory containing the assemblies to be processed.</param>
      <param name="excludeAbstractTypes">true to exclude public types that are abstract; otherwise false.</param>
      <param name="validateReferences">True to validate references of loaded assemblies before attempting to instantiate types; false otherwise.</param>
      <returns>Public types that implement the specified <paramref name="type" />.</returns>
    </member>
    <member name="T:Gemstone.WordExtensions.WordExtensions">
      <summary>
            Defines extension functions related to 16-bit words, 32-bit double-words and 64-bit quad-words.
            </summary>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignDoubleWord(System.Int32)">
      <summary>
            Aligns double-word value on a 32-bit boundary.
            </summary>
      <param name="doubleWord">Double-word value to align.</param>
      <returns>Double-word value aligned to next 32-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignDoubleWord(System.UInt32)">
      <summary>
            Aligns double-word value on a 32-bit boundary.
            </summary>
      <param name="doubleWord">Double-word value to align.</param>
      <returns>Double-word value aligned to next 32-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignQuadWord(System.Int64)">
      <summary>
            Aligns quad-word value on a 64-bit boundary.
            </summary>
      <param name="quadWord">Quad-word value to align.</param>
      <returns>Quad-word value aligned to next 64-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignQuadWord(System.UInt64)">
      <summary>
            Aligns quad-word value on a 64-bit boundary.
            </summary>
      <param name="quadWord">Quad-word value to align.</param>
      <returns>Quad-word value aligned to next 64-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignWord(System.Int16)">
      <summary>
            Aligns word value on a 16-bit boundary.
            </summary>
      <param name="word">Word value to align.</param>
      <returns>Word value aligned to next 16-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.AlignWord(System.UInt16)">
      <summary>
            Aligns word value on a 16-bit boundary.
            </summary>
      <param name="word">Word value to align.</param>
      <returns>Word value aligned to next 16-bit boundary.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighByte(System.UInt16)">
      <summary>
            Returns the high-byte from an unsigned word (UInt16).
            </summary>
      <param name="word">2-byte, 16-bit unsigned integer value.</param>
      <returns>The high-order byte of the specified 16-bit unsigned integer value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighDoubleWord(System.UInt64)">
      <summary>
            Returns the unsigned high-double-word (UInt32) from an unsigned quad-word (UInt64).
            </summary>
      <param name="quadWord">8-byte, 64-bit unsigned integer value.</param>
      <returns>The high-order double-word of the specified 64-bit unsigned integer value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighNibble(System.Byte)">
      <summary>
            Returns the high-nibble (high 4-bits) from a byte.
            </summary>
      <param name="value">Byte value.</param>
      <returns>The high-nibble of the specified byte value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.HighWord(System.UInt32)">
      <summary>
            Returns the unsigned high-word (UInt16) from an unsigned double-word (UInt32).
            </summary>
      <param name="doubleWord">4-byte, 32-bit unsigned integer value.</param>
      <returns>The unsigned high-order word of the specified 32-bit unsigned integer value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowByte(System.UInt16)">
      <summary>
            Returns the low-byte from an unsigned word (UInt16).
            </summary>
      <param name="word">2-byte, 16-bit unsigned integer value.</param>
      <returns>The low-order byte of the specified 16-bit unsigned integer value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowDoubleWord(System.UInt64)">
      <summary>
            Returns the unsigned low-double-word (UInt32) from an unsigned quad-word (UInt64).
            </summary>
      <param name="quadWord">8-byte, 64-bit unsigned integer value.</param>
      <returns>The low-order double-word of the specified 64-bit unsigned integer value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowNibble(System.Byte)">
      <summary>
            Returns the low-nibble (low 4-bits) from a byte.
            </summary>
      <param name="value">Byte value.</param>
      <returns>The low-nibble of the specified byte value.</returns>
    </member>
    <member name="M:Gemstone.WordExtensions.WordExtensions.LowWord(System.UInt32)">
      <summary>
            Returns the unsigned low-word (UInt16) from an unsigned double-word (UInt32).
            </summary>
      <param name="doubleWord">4-byte, 32-bit unsigned integer value.</param>
      <returns>The unsigned low-order word of the specified 32-bit unsigned integer value.</returns>
    </member>
  </members>
</doc>